
SEAI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000180a  0000189e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000180a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080012a  0080012a  000018c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014db  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000636  00000000  00000000  00002fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f55  00000000  00000000  000035f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  0000454c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057b  00000000  00000000  00004a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ec  00000000  00000000  00004f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006583  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_7>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_14>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_18>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2240>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ea e0       	ldi	r30, 0x0A	; 10
     17e:	f8 e1       	ldi	r31, 0x18	; 24
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	aa 32       	cpi	r26, 0x2A	; 42
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	aa e2       	ldi	r26, 0x2A	; 42
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a9 37       	cpi	r26, 0x79	; 121
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 24 04 	call	0x848	; 0x848 <main>
     1a0:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <uart_putchar>:

uint8_t uart_getchar(void)
{
	while( !(UCSR0A & (1<<RXC0)) );
	return(UDR0);
}
     1a8:	cf 93       	push	r28
     1aa:	c8 2f       	mov	r28, r24
     1ac:	8a 30       	cpi	r24, 0x0A	; 10
     1ae:	19 f4       	brne	.+6      	; 0x1b6 <uart_putchar+0xe>
     1b0:	8d e0       	ldi	r24, 0x0D	; 13
     1b2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_putchar>
     1b6:	e0 ec       	ldi	r30, 0xC0	; 192
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	90 81       	ld	r25, Z
     1bc:	95 ff       	sbrs	r25, 5
     1be:	fd cf       	rjmp	.-6      	; 0x1ba <uart_putchar+0x12>
     1c0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <Init232>:
     1cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     1d0:	87 e6       	ldi	r24, 0x67	; 103
     1d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     1d6:	88 e9       	ldi	r24, 0x98	; 152
     1d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     1dc:	87 e1       	ldi	r24, 0x17	; 23
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <__iob+0x3>
     1e4:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <__iob+0x2>
     1e8:	08 95       	ret

000001ea <InitExt>:
     1ea:	f8 94       	cli
     1ec:	0e 94 83 05 	call	0xb06	; 0xb06 <mpu6050_init>
     1f0:	78 94       	sei
     1f2:	08 95       	ret

000001f4 <InitHW>:
     1f4:	f8 94       	cli
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	84 b9       	out	0x04, r24	; 4
     1fa:	15 b8       	out	0x05, r1	; 5
     1fc:	87 b9       	out	0x07, r24	; 7
     1fe:	18 b8       	out	0x08, r1	; 8
     200:	8e e0       	ldi	r24, 0x0E	; 14
     202:	8a b9       	out	0x0a, r24	; 10
     204:	80 ef       	ldi	r24, 0xF0	; 240
     206:	8b b9       	out	0x0b, r24	; 11
     208:	14 bc       	out	0x24, r1	; 36
     20a:	15 bc       	out	0x25, r1	; 37
     20c:	16 bc       	out	0x26, r1	; 38
     20e:	84 b5       	in	r24, 0x24	; 36
     210:	81 60       	ori	r24, 0x01	; 1
     212:	84 bd       	out	0x24, r24	; 36
     214:	85 b5       	in	r24, 0x25	; 37
     216:	82 60       	ori	r24, 0x02	; 2
     218:	85 bd       	out	0x25, r24	; 37
     21a:	ee e6       	ldi	r30, 0x6E	; 110
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	82 60       	ori	r24, 0x02	; 2
     222:	80 83       	st	Z, r24
     224:	a0 eb       	ldi	r26, 0xB0	; 176
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	1c 92       	st	X, r1
     22a:	e1 eb       	ldi	r30, 0xB1	; 177
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	10 82       	st	Z, r1
     230:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     234:	8c e7       	ldi	r24, 0x7C	; 124
     236:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     23a:	8c 91       	ld	r24, X
     23c:	82 60       	ori	r24, 0x02	; 2
     23e:	8c 93       	st	X, r24
     240:	80 81       	ld	r24, Z
     242:	83 60       	ori	r24, 0x03	; 3
     244:	80 83       	st	Z, r24
     246:	e0 e7       	ldi	r30, 0x70	; 112
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	82 60       	ori	r24, 0x02	; 2
     24e:	80 83       	st	Z, r24
     250:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Init232>
     254:	0e 94 f5 00 	call	0x1ea	; 0x1ea <InitExt>
     258:	78 94       	sei
     25a:	08 95       	ret

0000025c <__vector_18>:


ISR(USART_RX_vect)
{
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
     266:	8f 93       	push	r24
	ReceivedByte = UDR0;
     268:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     26c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <ReceivedByte>
	rx_ok=true;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <rx_ok>
	timeout_232=0;
     276:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <timeout_232+0x1>
     27a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <timeout_232>
	/*ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
	printf("\nRecieved: %c\n", ReceivedByte); // Echo back the received byte back to the computer
	*/
}
     27e:	8f 91       	pop	r24
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <__vector_14>:

ISR(TIMER0_COMPA_vect)
{	
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	2f 93       	push	r18
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
	
	if (i2cwatchdog>i2cwatchdog_limit)
     29a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <i2cwatchdog>
     29e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <i2cwatchdog+0x1>
     2a2:	81 3a       	cpi	r24, 0xA1	; 161
     2a4:	2f e0       	ldi	r18, 0x0F	; 15
     2a6:	92 07       	cpc	r25, r18
     2a8:	20 f0       	brcs	.+8      	; 0x2b2 <__vector_14+0x28>
	{
		reseti2c=true;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <reseti2c>
     2b0:	09 c0       	rjmp	.+18     	; 0x2c4 <__vector_14+0x3a>
	} 
	else
	{
		i2cwatchdog++;
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <i2cwatchdog+0x1>
     2b8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <i2cwatchdog>
//		resetcount=0;
	}
	
	if (reseti2c)
     2bc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <reseti2c>
     2c0:	88 23       	and	r24, r24
     2c2:	d9 f0       	breq	.+54     	; 0x2fa <__vector_14+0x70>
	{
		if (tm0>400)
     2c4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <tm0>
     2c8:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <tm0+0x1>
     2cc:	81 39       	cpi	r24, 0x91	; 145
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	92 07       	cpc	r25, r18
     2d2:	70 f0       	brcs	.+28     	; 0x2f0 <__vector_14+0x66>
		{
			resetcount++;
     2d4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <resetcount>
     2d8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <resetcount+0x1>
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <resetcount+0x1>
     2e2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <resetcount>
			tm0=0;
     2e6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <tm0+0x1>
     2ea:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <tm0>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <__vector_14+0x70>
		}
		else
		{
			tm0++;
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <tm0+0x1>
     2f6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tm0>
		}		
	}
	
	
	delay_tm0++;
     2fa:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <delay_tm0>
     2fe:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <delay_tm0+0x1>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <delay_tm0+0x1>
     308:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <delay_tm0>
	timeout_232++;
     30c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timeout_232>
     310:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <timeout_232+0x1>
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <timeout_232+0x1>
     31a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <timeout_232>
	statusdelay++;
     31e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <statusdelay>
     322:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <statusdelay+0x1>
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <statusdelay+0x1>
     32c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <statusdelay>
}
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	2f 91       	pop	r18
     336:	0f 90       	pop	r0
     338:	0f be       	out	0x3f, r0	; 63
     33a:	0f 90       	pop	r0
     33c:	1f 90       	pop	r1
     33e:	18 95       	reti

00000340 <__vector_7>:



ISR(TIMER2_COMPA_vect)
{	//timer2 interrupt 10kHz 
     340:	1f 92       	push	r1
     342:	0f 92       	push	r0
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	0f 92       	push	r0
     348:	11 24       	eor	r1, r1
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25

	if (TCNT0<out_highbeam[0])
     34e:	96 b5       	in	r25, 0x26	; 38
     350:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <out_highbeam>
     354:	98 17       	cp	r25, r24
     356:	10 f4       	brcc	.+4      	; 0x35c <__vector_7+0x1c>
	{
		sbi(PORTB,0);
     358:	28 9a       	sbi	0x05, 0	; 5
     35a:	01 c0       	rjmp	.+2      	; 0x35e <__vector_7+0x1e>
	}
	else
	{
		cbi(PORTB,0);
     35c:	28 98       	cbi	0x05, 0	; 5
	}
	
	if (TCNT0<out_highbeam[1])
     35e:	96 b5       	in	r25, 0x26	; 38
     360:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <out_highbeam+0x1>
     364:	98 17       	cp	r25, r24
     366:	10 f4       	brcc	.+4      	; 0x36c <__vector_7+0x2c>
	{
		sbi(PORTB,1);
     368:	29 9a       	sbi	0x05, 1	; 5
     36a:	01 c0       	rjmp	.+2      	; 0x36e <__vector_7+0x2e>
	}
	else
	{
		cbi(PORTB,1);
     36c:	29 98       	cbi	0x05, 1	; 5
	}
	if (TCNT0<out_highbeam[2])
     36e:	96 b5       	in	r25, 0x26	; 38
     370:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <out_highbeam+0x2>
     374:	98 17       	cp	r25, r24
     376:	10 f4       	brcc	.+4      	; 0x37c <__vector_7+0x3c>
	{
		sbi(PORTB,2);
     378:	2a 9a       	sbi	0x05, 2	; 5
     37a:	01 c0       	rjmp	.+2      	; 0x37e <__vector_7+0x3e>
	}
	else
	{
		cbi(PORTB,2);
     37c:	2a 98       	cbi	0x05, 2	; 5
	}
	
	if (TCNT0<out_highbeam[3])
     37e:	96 b5       	in	r25, 0x26	; 38
     380:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <out_highbeam+0x3>
     384:	98 17       	cp	r25, r24
     386:	10 f4       	brcc	.+4      	; 0x38c <__vector_7+0x4c>
	{
		sbi(PORTB,3);
     388:	2b 9a       	sbi	0x05, 3	; 5
     38a:	01 c0       	rjmp	.+2      	; 0x38e <__vector_7+0x4e>
	}
	else
	{
		cbi(PORTB,3);
     38c:	2b 98       	cbi	0x05, 3	; 5
	}
	if (TCNT0<out_highbeam[4])
     38e:	96 b5       	in	r25, 0x26	; 38
     390:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <out_highbeam+0x4>
     394:	98 17       	cp	r25, r24
     396:	10 f4       	brcc	.+4      	; 0x39c <__vector_7+0x5c>
	{
		sbi(PORTB,4);
     398:	2c 9a       	sbi	0x05, 4	; 5
     39a:	01 c0       	rjmp	.+2      	; 0x39e <__vector_7+0x5e>
	}
	else
	{
		cbi(PORTB,4);
     39c:	2c 98       	cbi	0x05, 4	; 5
	}
	
	if (TCNT0<out_lowbeam[0])
     39e:	96 b5       	in	r25, 0x26	; 38
     3a0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <out_lowbeam>
     3a4:	98 17       	cp	r25, r24
     3a6:	10 f4       	brcc	.+4      	; 0x3ac <__vector_7+0x6c>
	{
		sbi(PORTC,0);
     3a8:	40 9a       	sbi	0x08, 0	; 8
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <__vector_7+0x6e>
	}
	else
	{
		cbi(PORTC,0);
     3ac:	40 98       	cbi	0x08, 0	; 8
	}
	
	if (TCNT0<out_lowbeam[1])
     3ae:	96 b5       	in	r25, 0x26	; 38
     3b0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <out_lowbeam+0x1>
     3b4:	98 17       	cp	r25, r24
     3b6:	10 f4       	brcc	.+4      	; 0x3bc <__vector_7+0x7c>
	{
		sbi(PORTC,1);
     3b8:	41 9a       	sbi	0x08, 1	; 8
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <__vector_7+0x7e>
	}
	else
	{
		cbi(PORTC,1);
     3bc:	41 98       	cbi	0x08, 1	; 8
	}
	if (TCNT0<out_lowbeam[2])
     3be:	96 b5       	in	r25, 0x26	; 38
     3c0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <out_lowbeam+0x2>
     3c4:	98 17       	cp	r25, r24
     3c6:	10 f4       	brcc	.+4      	; 0x3cc <__vector_7+0x8c>
	{
		sbi(PORTC,2);
     3c8:	42 9a       	sbi	0x08, 2	; 8
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <__vector_7+0x8e>
	}
	else
	{
		cbi(PORTC,2);
     3cc:	42 98       	cbi	0x08, 2	; 8
	}
	
	if (TCNT0<out_lowbeam[3])
     3ce:	96 b5       	in	r25, 0x26	; 38
     3d0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <out_lowbeam+0x3>
     3d4:	98 17       	cp	r25, r24
     3d6:	10 f4       	brcc	.+4      	; 0x3dc <__vector_7+0x9c>
	{
		sbi(PORTC,3);
     3d8:	43 9a       	sbi	0x08, 3	; 8
     3da:	01 c0       	rjmp	.+2      	; 0x3de <__vector_7+0x9e>
	}
	else
	{
		cbi(PORTC,3);
     3dc:	43 98       	cbi	0x08, 3	; 8
	}
	if (TCNT0<out_lowbeam[4])
     3de:	96 b5       	in	r25, 0x26	; 38
     3e0:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <out_lowbeam+0x4>
     3e4:	98 17       	cp	r25, r24
     3e6:	10 f4       	brcc	.+4      	; 0x3ec <__vector_7+0xac>
	{
		sbi(PORTD,2);
     3e8:	5a 9a       	sbi	0x0b, 2	; 11
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <__vector_7+0xae>
	}
	else
	{
		cbi(PORTD,2);
     3ec:	5a 98       	cbi	0x0b, 2	; 11
	}
	if (TCNT0<out_lowbeam[5])
     3ee:	96 b5       	in	r25, 0x26	; 38
     3f0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <out_lowbeam+0x5>
     3f4:	98 17       	cp	r25, r24
     3f6:	10 f4       	brcc	.+4      	; 0x3fc <__vector_7+0xbc>
	{
		sbi(PORTD,3);
     3f8:	5b 9a       	sbi	0x0b, 3	; 11
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <__vector_7+0xbe>
	}
	else
	{
		cbi(PORTD,3);
     3fc:	5b 98       	cbi	0x0b, 3	; 11
	}	

}
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <set_drl>:
		sensor_light=0;
	}*/
}

void set_drl()
{
     40c:	e0 e0       	ldi	r30, 0x00	; 0
     40e:	f1 e0       	ldi	r31, 0x01	; 1
     410:	2c e0       	ldi	r18, 0x0C	; 12
     412:	31 e0       	ldi	r19, 0x01	; 1
	int i;
	for(i=0; i<12; i++)
	{
		slide_lowbeam[i]=pwm_25;
     414:	86 e4       	ldi	r24, 0x46	; 70
     416:	81 93       	st	Z+, r24
}

void set_drl()
{
	int i;
	for(i=0; i<12; i++)
     418:	e2 17       	cp	r30, r18
     41a:	f3 07       	cpc	r31, r19
     41c:	e1 f7       	brne	.-8      	; 0x416 <set_drl+0xa>
     41e:	ec e0       	ldi	r30, 0x0C	; 12
     420:	f1 e0       	ldi	r31, 0x01	; 1
     422:	87 e1       	ldi	r24, 0x17	; 23
     424:	91 e0       	ldi	r25, 0x01	; 1
		slide_lowbeam[i]=pwm_25;
	}
	
	for( i=0; i<11; i++)
	{
		slide_highbeam[i]=pwm_0;
     426:	11 92       	st	Z+, r1
	for(i=0; i<12; i++)
	{
		slide_lowbeam[i]=pwm_25;
	}
	
	for( i=0; i<11; i++)
     428:	e8 17       	cp	r30, r24
     42a:	f9 07       	cpc	r31, r25
     42c:	e1 f7       	brne	.-8      	; 0x426 <set_drl+0x1a>
	{
		slide_highbeam[i]=pwm_0;
	}
}
     42e:	08 95       	ret

00000430 <set_lowbeam>:
void set_lowbeam()
{
	int i;
	for(i=0; i<3; i++)
	{
		slide_lowbeam[i]=pwm_25;
     430:	e0 e0       	ldi	r30, 0x00	; 0
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	86 e4       	ldi	r24, 0x46	; 70
     436:	80 83       	st	Z, r24
     438:	81 83       	std	Z+1, r24	; 0x01
     43a:	82 83       	std	Z+2, r24	; 0x02
	}
	for(i=3; i<7; i++)
	{
		slide_lowbeam[i]=pwm_50;
     43c:	86 e9       	ldi	r24, 0x96	; 150
     43e:	83 83       	std	Z+3, r24	; 0x03
     440:	84 83       	std	Z+4, r24	; 0x04
     442:	85 83       	std	Z+5, r24	; 0x05
     444:	86 83       	std	Z+6, r24	; 0x06
	}
	for(i=7; i<9; i++)
	{
		slide_lowbeam[i]=pwm_100;
     446:	9f ef       	ldi	r25, 0xFF	; 255
     448:	97 83       	std	Z+7, r25	; 0x07
     44a:	90 87       	std	Z+8, r25	; 0x08
	}
	for(i=9; i<12; i++)
	{
 		slide_lowbeam[i]=pwm_50;
     44c:	81 87       	std	Z+9, r24	; 0x09
     44e:	82 87       	std	Z+10, r24	; 0x0a
     450:	83 87       	std	Z+11, r24	; 0x0b
     452:	ec e0       	ldi	r30, 0x0C	; 12
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	87 e1       	ldi	r24, 0x17	; 23
     458:	91 e0       	ldi	r25, 0x01	; 1
	}
	
	for( i=0; i<11; i++)
	{
		slide_highbeam[i]=pwm_0;
     45a:	11 92       	st	Z+, r1
	for(i=9; i<12; i++)
	{
 		slide_lowbeam[i]=pwm_50;
	}
	
	for( i=0; i<11; i++)
     45c:	e8 17       	cp	r30, r24
     45e:	f9 07       	cpc	r31, r25
     460:	e1 f7       	brne	.-8      	; 0x45a <set_lowbeam+0x2a>
	{
		slide_highbeam[i]=pwm_0;
	}
}
     462:	08 95       	ret

00000464 <set_highbeam>:

void set_highbeam()
{
     464:	e0 e0       	ldi	r30, 0x00	; 0
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	8c e0       	ldi	r24, 0x0C	; 12
     46a:	91 e0       	ldi	r25, 0x01	; 1
	int i;
	for(i=0; i<12; i++)
	{
		slide_lowbeam[i]=pwm_0;
     46c:	11 92       	st	Z+, r1
}

void set_highbeam()
{
	int i;
	for(i=0; i<12; i++)
     46e:	e8 17       	cp	r30, r24
     470:	f9 07       	cpc	r31, r25
     472:	e1 f7       	brne	.-8      	; 0x46c <set_highbeam+0x8>
		slide_lowbeam[i]=pwm_0;
	}
	
	for( i=0; i<1; i++)
	{
		slide_highbeam[i]=pwm_25;
     474:	ec e0       	ldi	r30, 0x0C	; 12
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	26 e4       	ldi	r18, 0x46	; 70
     47a:	20 83       	st	Z, r18
	}
	for( i=1; i<4; i++)
	{
		slide_highbeam[i]=pwm_50;
     47c:	96 e9       	ldi	r25, 0x96	; 150
     47e:	91 83       	std	Z+1, r25	; 0x01
     480:	92 83       	std	Z+2, r25	; 0x02
     482:	93 83       	std	Z+3, r25	; 0x03
	}
	for( i=4; i<9; i++)
	{
		slide_highbeam[i]=pwm_100;
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	84 83       	std	Z+4, r24	; 0x04
     488:	85 83       	std	Z+5, r24	; 0x05
     48a:	86 83       	std	Z+6, r24	; 0x06
     48c:	87 83       	std	Z+7, r24	; 0x07
     48e:	80 87       	std	Z+8, r24	; 0x08
	}
	for( i=9; i<10; i++)
	{
		slide_highbeam[i]=pwm_50;
     490:	91 87       	std	Z+9, r25	; 0x09
	}
	for( i=10; i<11; i++)
	{
		slide_highbeam[i]=pwm_25;
     492:	22 87       	std	Z+10, r18	; 0x0a
     494:	08 95       	ret

00000496 <read_input>:


void read_input()
{
	
	if (!(bit_read_pull(PIND,7)))
     496:	4f 9b       	sbis	0x09, 7	; 9
     498:	08 c0       	rjmp	.+16     	; 0x4aa <read_input+0x14>
	{
		//auto on
		sw_auto=1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <sw_auto>
	}
	
	
	if (sw_auto)
	{
		if (sensor_light)
     4a0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sensor_light>
     4a4:	81 11       	cpse	r24, r1
     4a6:	14 c0       	rjmp	.+40     	; 0x4d0 <read_input+0x3a>
     4a8:	23 c0       	rjmp	.+70     	; 0x4f0 <read_input+0x5a>
		//printf("\nauto on");
	}
	else
	{
		//auto off
		sw_auto=0;
     4aa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <sw_auto>
		mode_auto=0;
     4ae:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <mode_auto>
		1 0 -> high beam
		0 0 -> low beam
		0 1 -> drl
		*/
		
		video_error=true;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <video_error>
		video_data=0b00100000;
     4b8:	90 e2       	ldi	r25, 0x20	; 32
     4ba:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <video_data>
		sensor_speed=(((video_data>>(6))&0b00000001));
     4be:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <sensor_speed>
		sensor_light=(((video_data>>(5))&0b00000001));
     4c2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sensor_light>
		video_new=1;
     4c6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <video_new>
		
		if (!(bit_read_pull(PIND,6)))
     4ca:	4e 99       	sbic	0x09, 6	; 9
     4cc:	17 c0       	rjmp	.+46     	; 0x4fc <read_input+0x66>
     4ce:	1e c0       	rjmp	.+60     	; 0x50c <read_input+0x76>
	
	if (sw_auto)
	{
		if (sensor_light)
		{
			if (sensor_speed)
     4d0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sensor_speed>
     4d4:	88 23       	and	r24, r24
     4d6:	31 f0       	breq	.+12     	; 0x4e4 <read_input+0x4e>
			{
				mode_auto=3;
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <mode_auto>
				set_highbeam();
     4de:	0e 94 32 02 	call	0x464	; 0x464 <set_highbeam>
     4e2:	08 95       	ret
			} 
			else
			{
				mode_auto=2;
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <mode_auto>
				set_lowbeam();
     4ea:	0e 94 18 02 	call	0x430	; 0x430 <set_lowbeam>
     4ee:	08 95       	ret
			}
		} 
		else
		{
			mode_auto=1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <mode_auto>
			set_drl();
     4f6:	0e 94 06 02 	call	0x40c	; 0x40c <set_drl>
     4fa:	08 95       	ret
		sensor_light=(((video_data>>(5))&0b00000001));
		video_new=1;
		
		if (!(bit_read_pull(PIND,6)))
		{
			if (!(bit_read_pull(PIND,5)))
     4fc:	4d 9b       	sbis	0x09, 5	; 9
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <read_input+0x70>
			{
				//low beam
				set_lowbeam();
     500:	0e 94 18 02 	call	0x430	; 0x430 <set_lowbeam>
     504:	08 95       	ret
			} 
			else
			{
				//drl
				set_drl();
     506:	0e 94 06 02 	call	0x40c	; 0x40c <set_drl>
     50a:	08 95       	ret
			}
		} 
		else
		{
			//highbeam
			set_highbeam();
     50c:	0e 94 32 02 	call	0x464	; 0x464 <set_highbeam>
     510:	08 95       	ret

00000512 <set_steering>:
		slide_highbeam[i]=pwm_25;
	}
}

void set_steering()
{
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     51a:	0f 2e       	mov	r0, r31
     51c:	fa e2       	ldi	r31, 0x2A	; 42
     51e:	ef 2e       	mov	r14, r31
     520:	f1 e0       	ldi	r31, 0x01	; 1
     522:	ff 2e       	mov	r15, r31
     524:	f0 2d       	mov	r31, r0
     526:	0c e2       	ldi	r16, 0x2C	; 44
     528:	11 e0       	ldi	r17, 0x01	; 1
     52a:	2e e2       	ldi	r18, 0x2E	; 46
     52c:	31 e0       	ldi	r19, 0x01	; 1
     52e:	40 e3       	ldi	r20, 0x30	; 48
     530:	51 e0       	ldi	r21, 0x01	; 1
     532:	62 e3       	ldi	r22, 0x32	; 50
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	84 e3       	ldi	r24, 0x34	; 52
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <mpu6050_getRawData>
	
	//if ((OKax==ax)&&(OKay==ay)&&(OKaz==az)&&(OKgx==gx)&&(OKgy==gy)&&(OKgz==gz))
	if ((OKax==ax)&&(OKay==az))
     53e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ax>
     542:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ax+0x1>
     546:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <OKax>
     54a:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <OKax+0x1>
     54e:	28 17       	cp	r18, r24
     550:	39 07       	cpc	r19, r25
     552:	d9 f4       	brne	.+54     	; 0x58a <set_steering+0x78>
     554:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <OKay>
     558:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <OKay+0x1>
     55c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <az>
     560:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <az+0x1>
     564:	42 17       	cp	r20, r18
     566:	53 07       	cpc	r21, r19
     568:	81 f4       	brne	.+32     	; 0x58a <set_steering+0x78>
	{
		OKay=ay;
     56a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ay>
     56e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <ay+0x1>
     572:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <OKay+0x1>
     576:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <OKay>
		ay=0;
     57a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <ay+0x1>
     57e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <ay>
		
		reseti2c=1;	
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <reseti2c>
     588:	2c c0       	rjmp	.+88     	; 0x5e2 <set_steering+0xd0>
		//i2cwatchdog=(i2cwatchdog_limit)*2;	
	}
	else
	{
		OKax=ax;
     58a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <OKax+0x1>
     58e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <OKax>
		OKay=ay;
     592:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ay>
     596:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <ay+0x1>
     59a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <OKay+0x1>
     59e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <OKay>
		OKaz=az;
     5a2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <az>
     5a6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <az+0x1>
     5aa:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <OKaz+0x1>
     5ae:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <OKaz>
		OKgx=gx;
     5b2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <gx>
     5b6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <gx+0x1>
     5ba:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <OKgx+0x1>
     5be:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <OKgx>
		OKgy=gy;
     5c2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <gy>
     5c6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <gy+0x1>
     5ca:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <OKgy+0x1>
     5ce:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <OKgy>
		OKgz=gz;
     5d2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     5d6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     5da:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <OKgz+0x1>
     5de:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <OKgz>
	}
				
	
	
	if ((ay<steering_offset_low)&&(ay>-steering_offset_low))
     5e2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ay>
     5e6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <ay+0x1>
     5ea:	9c 01       	movw	r18, r24
     5ec:	21 56       	subi	r18, 0x61	; 97
     5ee:	30 4f       	sbci	r19, 0xF0	; 240
     5f0:	2f 33       	cpi	r18, 0x3F	; 63
     5f2:	3f 41       	sbci	r19, 0x1F	; 31
     5f4:	18 f4       	brcc	.+6      	; 0x5fc <set_steering+0xea>
	{
		offset_steering=0;
     5f6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <offset_steering>
     5fa:	2d c0       	rjmp	.+90     	; 0x656 <set_steering+0x144>
	}
	else
	{
		if (ay>steering_offset_low)
     5fc:	81 3a       	cpi	r24, 0xA1	; 161
     5fe:	2f e0       	ldi	r18, 0x0F	; 15
     600:	92 07       	cpc	r25, r18
     602:	9c f0       	brlt	.+38     	; 0x62a <set_steering+0x118>
		{
			if (ay>steering_offset_medium)
     604:	81 34       	cpi	r24, 0x41	; 65
     606:	4f e1       	ldi	r20, 0x1F	; 31
     608:	94 07       	cpc	r25, r20
     60a:	5c f0       	brlt	.+22     	; 0x622 <set_steering+0x110>
			{
				if (ay>steering_offset_high)
     60c:	81 3e       	cpi	r24, 0xE1	; 225
     60e:	9e 42       	sbci	r25, 0x2E	; 46
     610:	24 f0       	brlt	.+8      	; 0x61a <set_steering+0x108>
				{
					offset_steering=-3;
     612:	8d ef       	ldi	r24, 0xFD	; 253
     614:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <offset_steering>
     618:	1e c0       	rjmp	.+60     	; 0x656 <set_steering+0x144>
				} 
				else
				{
					offset_steering=-2;
     61a:	8e ef       	ldi	r24, 0xFE	; 254
     61c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <offset_steering>
     620:	1a c0       	rjmp	.+52     	; 0x656 <set_steering+0x144>
				}
			} 
			else
			{
				offset_steering=-1;
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <offset_steering>
     628:	16 c0       	rjmp	.+44     	; 0x656 <set_steering+0x144>
			}
		} 
		else
		{
			if (ay<-steering_offset_low)
     62a:	80 36       	cpi	r24, 0x60	; 96
     62c:	40 ef       	ldi	r20, 0xF0	; 240
     62e:	94 07       	cpc	r25, r20
     630:	94 f4       	brge	.+36     	; 0x656 <set_steering+0x144>
			{
				if (ay<-steering_offset_medium)
     632:	80 3c       	cpi	r24, 0xC0	; 192
     634:	20 ee       	ldi	r18, 0xE0	; 224
     636:	92 07       	cpc	r25, r18
     638:	5c f4       	brge	.+22     	; 0x650 <set_steering+0x13e>
				{
					if (ay<-steering_offset_high)
     63a:	80 32       	cpi	r24, 0x20	; 32
     63c:	91 4d       	sbci	r25, 0xD1	; 209
     63e:	24 f4       	brge	.+8      	; 0x648 <set_steering+0x136>
					{
						offset_steering=3;
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <offset_steering>
     646:	07 c0       	rjmp	.+14     	; 0x656 <set_steering+0x144>
					}
					else
					{
						offset_steering=2;
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <offset_steering>
     64e:	03 c0       	rjmp	.+6      	; 0x656 <set_steering+0x144>
					}
				}
				else
				{
					offset_steering=1;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <offset_steering>
				}
			}
		}
	}
}
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	08 95       	ret

00000660 <set_out_offset>:

void set_out_offset()
{
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <offset_steering>
     672:	02 2e       	mov	r0, r18
     674:	00 0c       	add	r0, r0
     676:	33 0b       	sbc	r19, r19
     678:	f9 01       	movw	r30, r18
     67a:	ed 5f       	subi	r30, 0xFD	; 253
     67c:	fe 4f       	sbci	r31, 0xFE	; 254
     67e:	af e5       	ldi	r26, 0x5F	; 95
     680:	b1 e0       	ldi	r27, 0x01	; 1
     682:	27 5f       	subi	r18, 0xF7	; 247
     684:	3e 4f       	sbci	r19, 0xFE	; 254
	int i;
	for(i=0; i<6; i++)
	{
		out_lowbeam[i]=slide_lowbeam[3+i+offset_steering];
     686:	81 91       	ld	r24, Z+
     688:	8d 93       	st	X+, r24
}

void set_out_offset()
{
	int i;
	for(i=0; i<6; i++)
     68a:	e2 17       	cp	r30, r18
     68c:	f3 07       	cpc	r31, r19
     68e:	d9 f7       	brne	.-10     	; 0x686 <set_out_offset+0x26>
	{
		out_lowbeam[i]=slide_lowbeam[3+i+offset_steering];
	}
	
	if (3==mode_auto)
     690:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <mode_auto>
     694:	83 30       	cpi	r24, 0x03	; 3
     696:	71 f5       	brne	.+92     	; 0x6f4 <set_out_offset+0x94>
	{
		for( i=0; i<5; i++)
		{
			out_highbeam[i]=(slide_highbeam[3+i+offset_steering])*(1-(((video_data>>(4-i))&0b00000001)));
     698:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <video_data>
     69c:	c6 2e       	mov	r12, r22
     69e:	d1 2c       	mov	r13, r1
     6a0:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <offset_steering>
     6a4:	0a 2e       	mov	r0, r26
     6a6:	00 0c       	add	r0, r0
     6a8:	bb 0b       	sbc	r27, r27
     6aa:	a1 5f       	subi	r26, 0xF1	; 241
     6ac:	be 4f       	sbci	r27, 0xFE	; 254
     6ae:	ea e5       	ldi	r30, 0x5A	; 90
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	c0 e6       	ldi	r28, 0x60	; 96
     6b4:	d1 e0       	ldi	r29, 0x01	; 1
     6b6:	0f e5       	ldi	r16, 0x5F	; 95
     6b8:	11 e0       	ldi	r17, 0x01	; 1
     6ba:	44 e0       	ldi	r20, 0x04	; 4
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	fd 90       	ld	r15, X+
     6c0:	c6 01       	movw	r24, r12
     6c2:	04 2e       	mov	r0, r20
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <set_out_offset+0x6a>
     6c6:	95 95       	asr	r25
     6c8:	87 95       	ror	r24
     6ca:	0a 94       	dec	r0
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <set_out_offset+0x66>
     6ce:	9c 01       	movw	r18, r24
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	26 27       	eor	r18, r22
     6d4:	21 70       	andi	r18, 0x01	; 1
     6d6:	2f 9d       	mul	r18, r15
     6d8:	20 2d       	mov	r18, r0
     6da:	11 24       	eor	r1, r1
     6dc:	21 93       	st	Z+, r18
			out_lowbeam[i+1]=(slide_highbeam[3+i+offset_steering])*((((video_data>>(4-i))&0b00000001)));
     6de:	81 70       	andi	r24, 0x01	; 1
     6e0:	8f 9d       	mul	r24, r15
     6e2:	80 2d       	mov	r24, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	89 93       	st	Y+, r24
     6e8:	41 50       	subi	r20, 0x01	; 1
     6ea:	51 09       	sbc	r21, r1
		out_lowbeam[i]=slide_lowbeam[3+i+offset_steering];
	}
	
	if (3==mode_auto)
	{
		for( i=0; i<5; i++)
     6ec:	e0 17       	cp	r30, r16
     6ee:	f1 07       	cpc	r31, r17
     6f0:	31 f7       	brne	.-52     	; 0x6be <set_out_offset+0x5e>
     6f2:	11 c0       	rjmp	.+34     	; 0x716 <set_out_offset+0xb6>
     6f4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <offset_steering>
     6f8:	08 2e       	mov	r0, r24
     6fa:	00 0c       	add	r0, r0
     6fc:	99 0b       	sbc	r25, r25
     6fe:	fc 01       	movw	r30, r24
     700:	e1 5f       	subi	r30, 0xF1	; 241
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	aa e5       	ldi	r26, 0x5A	; 90
     706:	b1 e0       	ldi	r27, 0x01	; 1
     708:	8c 5e       	subi	r24, 0xEC	; 236
     70a:	9e 4f       	sbci	r25, 0xFE	; 254
	} 
	else
	{
		for( i=0; i<5; i++)
		{
			out_highbeam[i]=slide_highbeam[3+i+offset_steering];
     70c:	21 91       	ld	r18, Z+
     70e:	2d 93       	st	X+, r18
			out_lowbeam[i+1]=(slide_highbeam[3+i+offset_steering])*((((video_data>>(4-i))&0b00000001)));
		}
	} 
	else
	{
		for( i=0; i<5; i++)
     710:	e8 17       	cp	r30, r24
     712:	f9 07       	cpc	r31, r25
     714:	d9 f7       	brne	.-10     	; 0x70c <set_out_offset+0xac>
		{
			out_highbeam[i]=slide_highbeam[3+i+offset_steering];
		}
	}
		
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	08 95       	ret

00000726 <restarti2c>:

void restarti2c()
{

	if (resetcount<i2creset_limit)
     726:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <resetcount>
     72a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <resetcount+0x1>
     72e:	02 97       	sbiw	r24, 0x02	; 2
     730:	e0 f4       	brcc	.+56     	; 0x76a <restarti2c+0x44>
	{
		//printf("\nRESET!!!\n");
		if ((3==mode_auto)&&(1==sw_auto))
     732:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <mode_auto>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	29 f4       	brne	.+10     	; 0x744 <restarti2c+0x1e>
     73a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <sw_auto>
     73e:	81 11       	cpse	r24, r1
		{
			set_lowbeam();
     740:	0e 94 18 02 	call	0x430	; 0x430 <set_lowbeam>
		}
		
		TWCR =0;
     744:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		InitExt();
     748:	0e 94 f5 00 	call	0x1ea	; 0x1ea <InitExt>
		i2cwatchdog=0;
     74c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <i2cwatchdog+0x1>
     750:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <i2cwatchdog>
		reseti2c=false;	
     754:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <reseti2c>
		resetcount++;
     758:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <resetcount>
     75c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <resetcount+0x1>
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <resetcount+0x1>
     766:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <resetcount>
	}
	
	if (resetcount>250)
     76a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <resetcount>
     76e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <resetcount+0x1>
     772:	8b 3f       	cpi	r24, 0xFB	; 251
     774:	91 05       	cpc	r25, r1
     776:	20 f0       	brcs	.+8      	; 0x780 <restarti2c+0x5a>
	{
		resetcount=0;
     778:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <resetcount+0x1>
     77c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <resetcount>
	}
	
	ay=0;
     780:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <ay+0x1>
     784:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <ay>
	OKay=0;
     788:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <OKay+0x1>
     78c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <OKay>
	offset_steering=0;
     790:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <offset_steering>
     794:	08 95       	ret

00000796 <set_status>:
}


void set_status()
{
	if (statusdelay>statuswait)
     796:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <statusdelay>
     79a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <statusdelay+0x1>
     79e:	81 3a       	cpi	r24, 0xA1	; 161
     7a0:	9f 40       	sbci	r25, 0x0F	; 15
     7a2:	08 f4       	brcc	.+2      	; 0x7a6 <set_status+0x10>
     7a4:	50 c0       	rjmp	.+160    	; 0x846 <set_status+0xb0>
	{
		statusmsg=0;
     7a6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <statusmsg>
		if (sw_auto)
     7aa:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <sw_auto>
     7ae:	88 23       	and	r24, r24
     7b0:	a1 f0       	breq	.+40     	; 0x7da <set_status+0x44>
		{
			
			
			if (1==mode_auto)
     7b2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <mode_auto>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	21 f4       	brne	.+8      	; 0x7c2 <set_status+0x2c>
			{
				//drl
				statusmsg=statusmsg|0b00000010;
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
     7c0:	1e c0       	rjmp	.+60     	; 0x7fe <set_status+0x68>
			} 
			else
			{
				if (2==mode_auto)
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	21 f4       	brne	.+8      	; 0x7ce <set_status+0x38>
				{
					//low beam
					statusmsg=statusmsg|0b00000100;
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
     7cc:	18 c0       	rjmp	.+48     	; 0x7fe <set_status+0x68>
				}
				else
				{
					if (3==mode_auto)
     7ce:	83 30       	cpi	r24, 0x03	; 3
     7d0:	b1 f4       	brne	.+44     	; 0x7fe <set_status+0x68>
					{
						//highbeam
						statusmsg=statusmsg|0b00001000;
     7d2:	88 e0       	ldi	r24, 0x08	; 8
     7d4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
     7d8:	12 c0       	rjmp	.+36     	; 0x7fe <set_status+0x68>
			}	
		}
		else
		{
			
		statusmsg=statusmsg|0b00000001;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
		/*  6 5
		1 0 -> high beam
		0 0 -> low beam
		0 1 -> drl
		*/
			if (!(bit_read_pull(PIND,6)))
     7e0:	4e 9b       	sbis	0x09, 6	; 9
     7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <set_status+0x62>
			{
				if (!(bit_read_pull(PIND,5)))
     7e4:	4d 9b       	sbis	0x09, 5	; 9
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <set_status+0x5a>
				{
					//low beam
					statusmsg=statusmsg|0b00000100;
     7e8:	85 e0       	ldi	r24, 0x05	; 5
     7ea:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
     7ee:	07 c0       	rjmp	.+14     	; 0x7fe <set_status+0x68>
				} 
				else
				{
					//drl
					statusmsg=statusmsg|0b00000010;
     7f0:	83 e0       	ldi	r24, 0x03	; 3
     7f2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <set_status+0x68>
				}
			} 
			else
			{
				//highbeam
				statusmsg=statusmsg|0b00001000;
     7f8:	89 e0       	ldi	r24, 0x09	; 9
     7fa:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
			}
		}
		
		if (reseti2c)
     7fe:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <reseti2c>
     802:	88 23       	and	r24, r24
     804:	29 f0       	breq	.+10     	; 0x810 <set_status+0x7a>
		{
			//i2c problem
			statusmsg=statusmsg|0b00010000;
     806:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <statusmsg>
     80a:	80 61       	ori	r24, 0x10	; 16
     80c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
		} 
		
		if (video_error)
     810:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <video_error>
     814:	88 23       	and	r24, r24
     816:	29 f0       	breq	.+10     	; 0x822 <set_status+0x8c>
		{
			//i2c problem
			statusmsg=statusmsg|0b00100000;
     818:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <statusmsg>
     81c:	80 62       	ori	r24, 0x20	; 32
     81e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <statusmsg>
		}
		
		//uart_putc(statusmsg);
		printf("%c\n",statusmsg);
     822:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <statusmsg>
     826:	1f 92       	push	r1
     828:	8f 93       	push	r24
     82a:	85 e2       	ldi	r24, 0x25	; 37
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	0e 94 8f 0b 	call	0x171e	; 0x171e <printf>
		
		statusdelay=0;
     836:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <statusdelay+0x1>
     83a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <statusdelay>
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	08 95       	ret

00000848 <main>:
	}
}

int main(void) 
{
	InitHW();
     848:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <InitHW>
		}
		else
		{
			if ((0==video_new)&&(timeout_232>rs232watchdog_limit))
			{
				video_error=true;
     84c:	c1 e0       	ldi	r28, 0x01	; 1
				video_data=0b00100000;
     84e:	d0 e2       	ldi	r29, 0x20	; 32
	
	
	while(1)
	{
		
		if (reseti2c)
     850:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <reseti2c>
     854:	81 11       	cpse	r24, r1
		{
			restarti2c();
     856:	0e 94 93 03 	call	0x726	; 0x726 <restarti2c>
		}
		
		read_input();
     85a:	0e 94 4b 02 	call	0x496	; 0x496 <read_input>
		if (rx_ok)
     85e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <rx_ok>
     862:	88 23       	and	r24, r24
     864:	c9 f0       	breq	.+50     	; 0x898 <main+0x50>
		{
			rx_ok=false;
     866:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <rx_ok>
			//ReceivedByte = UDR0;
			if (0==video_new)
     86a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <video_new>
     86e:	81 11       	cpse	r24, r1
     870:	28 c0       	rjmp	.+80     	; 0x8c2 <main+0x7a>
			{
				video_error=false;
     872:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <video_error>
				video_data=ReceivedByte;
     876:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <ReceivedByte>
     87a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <video_data>
				sensor_speed=(((video_data>>(6))&0b00000001));
     87e:	86 fb       	bst	r24, 6
     880:	99 27       	eor	r25, r25
     882:	90 f9       	bld	r25, 0
     884:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <sensor_speed>
				sensor_light=(((video_data>>(5))&0b00000001));
     888:	85 fb       	bst	r24, 5
     88a:	88 27       	eor	r24, r24
     88c:	80 f9       	bld	r24, 0
     88e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sensor_light>
				video_new=1;
     892:	c0 93 53 01 	sts	0x0153, r28	; 0x800153 <video_new>
     896:	15 c0       	rjmp	.+42     	; 0x8c2 <main+0x7a>
				//printf("\n%c",ReceivedByte);
			}
		}
		else
		{
			if ((0==video_new)&&(timeout_232>rs232watchdog_limit))
     898:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <video_new>
     89c:	81 11       	cpse	r24, r1
     89e:	11 c0       	rjmp	.+34     	; 0x8c2 <main+0x7a>
     8a0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timeout_232>
     8a4:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <timeout_232+0x1>
     8a8:	81 34       	cpi	r24, 0x41	; 65
     8aa:	9f 41       	sbci	r25, 0x1F	; 31
     8ac:	50 f0       	brcs	.+20     	; 0x8c2 <main+0x7a>
			{
				video_error=true;
     8ae:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <video_error>
				video_data=0b00100000;
     8b2:	d0 93 59 01 	sts	0x0159, r29	; 0x800159 <video_data>
				sensor_speed=(((video_data>>(6))&0b00000001));
     8b6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <sensor_speed>
				sensor_light=(((video_data>>(5))&0b00000001));
     8ba:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <sensor_light>
				video_new=1;
     8be:	c0 93 53 01 	sts	0x0153, r28	; 0x800153 <video_new>
		}
		
		
		
		
		if (delay_tm0>(i2cwatchdog_limit/4))
     8c2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <delay_tm0>
     8c6:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <delay_tm0+0x1>
     8ca:	89 3e       	cpi	r24, 0xE9	; 233
     8cc:	93 40       	sbci	r25, 0x03	; 3
     8ce:	08 f4       	brcc	.+2      	; 0x8d2 <main+0x8a>
     8d0:	bf cf       	rjmp	.-130    	; 0x850 <main+0x8>
		{
			set_steering();
     8d2:	0e 94 89 02 	call	0x512	; 0x512 <set_steering>
			video_new=0;
     8d6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <video_new>
			delay_tm0=0;
     8da:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <delay_tm0+0x1>
     8de:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <delay_tm0>
			i2cwatchdog=0;
     8e2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <i2cwatchdog+0x1>
     8e6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <i2cwatchdog>
			set_out_offset();
     8ea:	0e 94 30 03 	call	0x660	; 0x660 <set_out_offset>
			set_status();
     8ee:	0e 94 cb 03 	call	0x796	; 0x796 <set_status>
     8f2:	ae cf       	rjmp	.-164    	; 0x850 <main+0x8>

000008f4 <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	66 23       	and	r22, r22
     908:	b9 f1       	breq	.+110    	; 0x978 <__stack+0x79>
     90a:	c5 2f       	mov	r28, r21
     90c:	d4 2f       	mov	r29, r20
     90e:	d6 2e       	mov	r13, r22
     910:	18 2f       	mov	r17, r24
     912:	80 ed       	ldi	r24, 0xD0	; 208
     914:	0e 94 0b 06 	call	0xc16	; 0xc16 <i2c_start>
     918:	81 2f       	mov	r24, r17
     91a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <i2c_write>
     91e:	85 e3       	ldi	r24, 0x35	; 53
     920:	8a 95       	dec	r24
     922:	f1 f7       	brne	.-4      	; 0x920 <__stack+0x21>
     924:	00 00       	nop
     926:	81 ed       	ldi	r24, 0xD1	; 209
     928:	0e 94 0b 06 	call	0xc16	; 0xc16 <i2c_start>
     92c:	0d 2f       	mov	r16, r29
     92e:	1c 2f       	mov	r17, r28
     930:	ee 24       	eor	r14, r14
     932:	ea 94       	dec	r14
     934:	ed 0c       	add	r14, r13
     936:	f1 2c       	mov	r15, r1
     938:	ef ef       	ldi	r30, 0xFF	; 255
     93a:	ee 1a       	sub	r14, r30
     93c:	fe 0a       	sbc	r15, r30
     93e:	c0 e0       	ldi	r28, 0x00	; 0
     940:	d0 e0       	ldi	r29, 0x00	; 0
     942:	ad 2c       	mov	r10, r13
     944:	b1 2c       	mov	r11, r1
     946:	f1 e0       	ldi	r31, 0x01	; 1
     948:	af 1a       	sub	r10, r31
     94a:	b1 08       	sbc	r11, r1
     94c:	ca 15       	cp	r28, r10
     94e:	db 05       	cpc	r29, r11
     950:	29 f4       	brne	.+10     	; 0x95c <__stack+0x5d>
     952:	0e 94 9c 06 	call	0xd38	; 0xd38 <i2c_readNak>
     956:	f8 01       	movw	r30, r16
     958:	80 83       	st	Z, r24
     95a:	04 c0       	rjmp	.+8      	; 0x964 <__stack+0x65>
     95c:	0e 94 82 06 	call	0xd04	; 0xd04 <i2c_readAck>
     960:	f8 01       	movw	r30, r16
     962:	80 83       	st	Z, r24
     964:	21 96       	adiw	r28, 0x01	; 1
     966:	0f 5f       	subi	r16, 0xFF	; 255
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	ce 15       	cp	r28, r14
     96c:	df 05       	cpc	r29, r15
     96e:	71 f7       	brne	.-36     	; 0x94c <__stack+0x4d>
     970:	cd 2d       	mov	r28, r13
     972:	0e 94 51 06 	call	0xca2	; 0xca2 <i2c_stop>
     976:	01 c0       	rjmp	.+2      	; 0x97a <__stack+0x7b>
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	8c 2f       	mov	r24, r28
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	08 95       	ret

00000990 <mpu6050_readByte>:
     990:	ab 01       	movw	r20, r22
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <mpu6050_readBytes>
     998:	08 95       	ret

0000099a <mpu6050_writeBytes>:
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	66 23       	and	r22, r22
     9a8:	d1 f0       	breq	.+52     	; 0x9de <mpu6050_writeBytes+0x44>
     9aa:	7a 01       	movw	r14, r20
     9ac:	16 2f       	mov	r17, r22
     9ae:	c8 2f       	mov	r28, r24
     9b0:	80 ed       	ldi	r24, 0xD0	; 208
     9b2:	0e 94 0b 06 	call	0xc16	; 0xc16 <i2c_start>
     9b6:	8c 2f       	mov	r24, r28
     9b8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <i2c_write>
     9bc:	e7 01       	movw	r28, r14
     9be:	6f ef       	ldi	r22, 0xFF	; 255
     9c0:	61 0f       	add	r22, r17
     9c2:	06 2f       	mov	r16, r22
     9c4:	10 e0       	ldi	r17, 0x00	; 0
     9c6:	0f 5f       	subi	r16, 0xFF	; 255
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	0e 0d       	add	r16, r14
     9cc:	1f 1d       	adc	r17, r15
     9ce:	89 91       	ld	r24, Y+
     9d0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <i2c_write>
     9d4:	c0 17       	cp	r28, r16
     9d6:	d1 07       	cpc	r29, r17
     9d8:	d1 f7       	brne	.-12     	; 0x9ce <mpu6050_writeBytes+0x34>
     9da:	0e 94 51 06 	call	0xca2	; 0xca2 <i2c_stop>
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <mpu6050_writeByte>:
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	1f 92       	push	r1
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	69 83       	std	Y+1, r22	; 0x01
     9f8:	ae 01       	movw	r20, r28
     9fa:	4f 5f       	subi	r20, 0xFF	; 255
     9fc:	5f 4f       	sbci	r21, 0xFF	; 255
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	0e 94 cd 04 	call	0x99a	; 0x99a <mpu6050_writeBytes>
     a04:	0f 90       	pop	r0
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <mpu6050_writeBits>:
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	1f 92       	push	r1
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	44 23       	and	r20, r20
     a20:	89 f1       	breq	.+98     	; 0xa84 <mpu6050_writeBits+0x78>
     a22:	f2 2e       	mov	r15, r18
     a24:	14 2f       	mov	r17, r20
     a26:	06 2f       	mov	r16, r22
     a28:	e8 2e       	mov	r14, r24
     a2a:	19 82       	std	Y+1, r1	; 0x01
     a2c:	be 01       	movw	r22, r28
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	0e 94 c8 04 	call	0x990	; 0x990 <mpu6050_readByte>
     a36:	88 23       	and	r24, r24
     a38:	29 f1       	breq	.+74     	; 0xa84 <mpu6050_writeBits+0x78>
     a3a:	40 2f       	mov	r20, r16
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	41 1b       	sub	r20, r17
     a40:	51 09       	sbc	r21, r1
     a42:	4f 5f       	subi	r20, 0xFF	; 255
     a44:	5f 4f       	sbci	r21, 0xFF	; 255
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <mpu6050_writeBits+0x44>
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	1a 95       	dec	r17
     a52:	e2 f7       	brpl	.-8      	; 0xa4c <mpu6050_writeBits+0x40>
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	04 2e       	mov	r0, r20
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <mpu6050_writeBits+0x52>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	0a 94       	dec	r0
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <mpu6050_writeBits+0x4e>
     a62:	2f 2d       	mov	r18, r15
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <mpu6050_writeBits+0x60>
     a68:	22 0f       	add	r18, r18
     a6a:	33 1f       	adc	r19, r19
     a6c:	4a 95       	dec	r20
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <mpu6050_writeBits+0x5c>
     a70:	68 2f       	mov	r22, r24
     a72:	60 95       	com	r22
     a74:	99 81       	ldd	r25, Y+1	; 0x01
     a76:	69 23       	and	r22, r25
     a78:	82 23       	and	r24, r18
     a7a:	68 2b       	or	r22, r24
     a7c:	69 83       	std	Y+1, r22	; 0x01
     a7e:	8e 2d       	mov	r24, r14
     a80:	0e 94 f6 04 	call	0x9ec	; 0x9ec <mpu6050_writeByte>
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	08 95       	ret

00000a94 <mpu6050_writeBit>:
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	1f 92       	push	r1
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	18 2f       	mov	r17, r24
     aa6:	06 2f       	mov	r16, r22
     aa8:	f4 2e       	mov	r15, r20
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	0e 94 c8 04 	call	0x990	; 0x990 <mpu6050_readByte>
     ab4:	ff 20       	and	r15, r15
     ab6:	59 f0       	breq	.+22     	; 0xace <mpu6050_writeBit+0x3a>
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	b9 01       	movw	r22, r18
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <mpu6050_writeBit+0x30>
     ac0:	66 0f       	add	r22, r22
     ac2:	77 1f       	adc	r23, r23
     ac4:	0a 95       	dec	r16
     ac6:	e2 f7       	brpl	.-8      	; 0xac0 <mpu6050_writeBit+0x2c>
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	68 2b       	or	r22, r24
     acc:	0b c0       	rjmp	.+22     	; 0xae4 <mpu6050_writeBit+0x50>
     ace:	21 e0       	ldi	r18, 0x01	; 1
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	b9 01       	movw	r22, r18
     ad4:	02 c0       	rjmp	.+4      	; 0xada <mpu6050_writeBit+0x46>
     ad6:	66 0f       	add	r22, r22
     ad8:	77 1f       	adc	r23, r23
     ada:	0a 95       	dec	r16
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <mpu6050_writeBit+0x42>
     ade:	60 95       	com	r22
     ae0:	99 81       	ldd	r25, Y+1	; 0x01
     ae2:	69 23       	and	r22, r25
     ae4:	69 83       	std	Y+1, r22	; 0x01
     ae6:	81 2f       	mov	r24, r17
     ae8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <mpu6050_writeByte>
     aec:	0f 90       	pop	r0
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	08 95       	ret

00000afa <mpu6050_setSleepDisabled>:
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	66 e0       	ldi	r22, 0x06	; 6
     afe:	8b e6       	ldi	r24, 0x6B	; 107
     b00:	0e 94 4a 05 	call	0xa94	; 0xa94 <mpu6050_writeBit>
     b04:	08 95       	ret

00000b06 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     b06:	0e 94 05 06 	call	0xc0a	; 0xc0a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0a:	25 e3       	ldi	r18, 0x35	; 53
     b0c:	2a 95       	dec	r18
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <mpu6050_init+0x6>
     b10:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	91 ee       	ldi	r25, 0xE1	; 225
     b16:	24 e0       	ldi	r18, 0x04	; 4
     b18:	81 50       	subi	r24, 0x01	; 1
     b1a:	90 40       	sbci	r25, 0x00	; 0
     b1c:	20 40       	sbci	r18, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <mpu6050_init+0x12>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <mpu6050_init+0x1c>
     b22:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     b24:	0e 94 7d 05 	call	0xafa	; 0xafa <mpu6050_setSleepDisabled>
     b28:	8f e3       	ldi	r24, 0x3F	; 63
     b2a:	9c e9       	ldi	r25, 0x9C	; 156
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <mpu6050_init+0x26>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <mpu6050_init+0x2c>
     b32:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	43 e0       	ldi	r20, 0x03	; 3
     b38:	62 e0       	ldi	r22, 0x02	; 2
     b3a:	8b e6       	ldi	r24, 0x6B	; 107
     b3c:	0e 94 06 05 	call	0xa0c	; 0xa0c <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     b40:	23 e0       	ldi	r18, 0x03	; 3
     b42:	43 e0       	ldi	r20, 0x03	; 3
     b44:	62 e0       	ldi	r22, 0x02	; 2
     b46:	8a e1       	ldi	r24, 0x1A	; 26
     b48:	0e 94 06 05 	call	0xa0c	; 0xa0c <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     b4c:	64 e0       	ldi	r22, 0x04	; 4
     b4e:	89 e1       	ldi	r24, 0x19	; 25
     b50:	0e 94 f6 04 	call	0x9ec	; 0x9ec <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     b54:	23 e0       	ldi	r18, 0x03	; 3
     b56:	42 e0       	ldi	r20, 0x02	; 2
     b58:	64 e0       	ldi	r22, 0x04	; 4
     b5a:	8b e1       	ldi	r24, 0x1B	; 27
     b5c:	0e 94 06 05 	call	0xa0c	; 0xa0c <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	42 e0       	ldi	r20, 0x02	; 2
     b64:	64 e0       	ldi	r22, 0x04	; 4
     b66:	8c e1       	ldi	r24, 0x1C	; 28
     b68:	0e 94 06 05 	call	0xa0c	; 0xa0c <mpu6050_writeBits>
     b6c:	08 95       	ret

00000b6e <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     b6e:	8f 92       	push	r8
     b70:	9f 92       	push	r9
     b72:	af 92       	push	r10
     b74:	bf 92       	push	r11
     b76:	cf 92       	push	r12
     b78:	df 92       	push	r13
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	4c 01       	movw	r8, r24
     b88:	5b 01       	movw	r10, r22
     b8a:	6a 01       	movw	r12, r20
     b8c:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     b8e:	45 e6       	ldi	r20, 0x65	; 101
     b90:	51 e0       	ldi	r21, 0x01	; 1
     b92:	6e e0       	ldi	r22, 0x0E	; 14
     b94:	8b e3       	ldi	r24, 0x3B	; 59
     b96:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     b9a:	e5 e6       	ldi	r30, 0x65	; 101
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	20 81       	ld	r18, Z
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	92 2b       	or	r25, r18
     ba6:	d4 01       	movw	r26, r8
     ba8:	8d 93       	st	X+, r24
     baa:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     bac:	22 81       	ldd	r18, Z+2	; 0x02
     bae:	83 81       	ldd	r24, Z+3	; 0x03
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	92 2b       	or	r25, r18
     bb4:	d5 01       	movw	r26, r10
     bb6:	8d 93       	st	X+, r24
     bb8:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     bba:	24 81       	ldd	r18, Z+4	; 0x04
     bbc:	85 81       	ldd	r24, Z+5	; 0x05
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	92 2b       	or	r25, r18
     bc2:	d6 01       	movw	r26, r12
     bc4:	8d 93       	st	X+, r24
     bc6:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     bc8:	20 85       	ldd	r18, Z+8	; 0x08
     bca:	81 85       	ldd	r24, Z+9	; 0x09
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	92 2b       	or	r25, r18
     bd0:	99 83       	std	Y+1, r25	; 0x01
     bd2:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     bd4:	22 85       	ldd	r18, Z+10	; 0x0a
     bd6:	83 85       	ldd	r24, Z+11	; 0x0b
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	92 2b       	or	r25, r18
     bdc:	d8 01       	movw	r26, r16
     bde:	8d 93       	st	X+, r24
     be0:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     be2:	24 85       	ldd	r18, Z+12	; 0x0c
     be4:	85 85       	ldd	r24, Z+13	; 0x0d
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	92 2b       	or	r25, r18
     bea:	f7 01       	movw	r30, r14
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	80 83       	st	Z, r24
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	af 90       	pop	r10
     c04:	9f 90       	pop	r9
     c06:	8f 90       	pop	r8
     c08:	08 95       	ret

00000c0a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     c0a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c0e:	8c e0       	ldi	r24, 0x0C	; 12
     c10:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     c14:	08 95       	ret

00000c16 <i2c_start>:
     c16:	94 ea       	ldi	r25, 0xA4	; 164
     c18:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     c1c:	4f ef       	ldi	r20, 0xFF	; 255
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	ec eb       	ldi	r30, 0xBC	; 188
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	90 81       	ld	r25, Z
     c2a:	99 23       	and	r25, r25
     c2c:	34 f0       	brlt	.+12     	; 0xc3a <i2c_start+0x24>
     c2e:	41 50       	subi	r20, 0x01	; 1
     c30:	51 09       	sbc	r21, r1
     c32:	61 09       	sbc	r22, r1
     c34:	71 09       	sbc	r23, r1
     c36:	c0 f7       	brcc	.-16     	; 0xc28 <i2c_start+0x12>
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <i2c_start+0x2c>
     c3a:	45 2b       	or	r20, r21
     c3c:	46 2b       	or	r20, r22
     c3e:	47 2b       	or	r20, r23
     c40:	41 f1       	breq	.+80     	; 0xc92 <i2c_start+0x7c>
     c42:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c46:	98 7f       	andi	r25, 0xF8	; 248
     c48:	98 30       	cpi	r25, 0x08	; 8
     c4a:	11 f0       	breq	.+4      	; 0xc50 <i2c_start+0x3a>
     c4c:	90 31       	cpi	r25, 0x10	; 16
     c4e:	19 f5       	brne	.+70     	; 0xc96 <i2c_start+0x80>
     c50:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     c54:	84 e8       	ldi	r24, 0x84	; 132
     c56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	ec eb       	ldi	r30, 0xBC	; 188
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	20 81       	ld	r18, Z
     c68:	22 23       	and	r18, r18
     c6a:	2c f0       	brlt	.+10     	; 0xc76 <i2c_start+0x60>
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	a1 09       	sbc	r26, r1
     c70:	b1 09       	sbc	r27, r1
     c72:	c8 f7       	brcc	.-14     	; 0xc66 <i2c_start+0x50>
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <i2c_start+0x68>
     c76:	89 2b       	or	r24, r25
     c78:	8a 2b       	or	r24, r26
     c7a:	8b 2b       	or	r24, r27
     c7c:	71 f0       	breq	.+28     	; 0xc9a <i2c_start+0x84>
     c7e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c82:	98 7f       	andi	r25, 0xF8	; 248
     c84:	98 31       	cpi	r25, 0x18	; 24
     c86:	59 f0       	breq	.+22     	; 0xc9e <i2c_start+0x88>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 34       	cpi	r25, 0x40	; 64
     c8c:	49 f4       	brne	.+18     	; 0xca0 <i2c_start+0x8a>
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	08 95       	ret
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	08 95       	ret
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	08 95       	ret
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	08 95       	ret
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	08 95       	ret

00000ca2 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ca2:	84 e9       	ldi	r24, 0x94	; 148
     ca4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	ec eb       	ldi	r30, 0xBC	; 188
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	20 81       	ld	r18, Z
     cb2:	24 ff       	sbrs	r18, 4
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <i2c_stop+0x1e>
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	81 15       	cp	r24, r1
     cba:	21 e0       	ldi	r18, 0x01	; 1
     cbc:	92 07       	cpc	r25, r18
     cbe:	c1 f7       	brne	.-16     	; 0xcb0 <i2c_stop+0xe>
     cc0:	08 95       	ret

00000cc2 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     cc2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     cc6:	84 e8       	ldi	r24, 0x84	; 132
     cc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     cd4:	ec eb       	ldi	r30, 0xBC	; 188
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	20 81       	ld	r18, Z
     cda:	22 23       	and	r18, r18
     cdc:	2c f0       	brlt	.+10     	; 0xce8 <i2c_write+0x26>
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	a1 09       	sbc	r26, r1
     ce2:	b1 09       	sbc	r27, r1
     ce4:	c8 f7       	brcc	.-14     	; 0xcd8 <i2c_write+0x16>
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <i2c_write+0x2e>
	if(i2c_timer == 0)
     ce8:	89 2b       	or	r24, r25
     cea:	8a 2b       	or	r24, r26
     cec:	8b 2b       	or	r24, r27
     cee:	41 f0       	breq	.+16     	; 0xd00 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     cf0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     cf4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	98 32       	cpi	r25, 0x28	; 40
     cfa:	19 f4       	brne	.+6      	; 0xd02 <i2c_write+0x40>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     d02:	08 95       	ret

00000d04 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     d04:	84 ec       	ldi	r24, 0xC4	; 196
     d06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	a0 e0       	ldi	r26, 0x00	; 0
     d10:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     d12:	ec eb       	ldi	r30, 0xBC	; 188
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	20 81       	ld	r18, Z
     d18:	22 23       	and	r18, r18
     d1a:	2c f0       	brlt	.+10     	; 0xd26 <i2c_readAck+0x22>
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	a1 09       	sbc	r26, r1
     d20:	b1 09       	sbc	r27, r1
     d22:	c8 f7       	brcc	.-14     	; 0xd16 <i2c_readAck+0x12>
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     d26:	89 2b       	or	r24, r25
     d28:	8a 2b       	or	r24, r26
     d2a:	8b 2b       	or	r24, r27
     d2c:	19 f0       	breq	.+6      	; 0xd34 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     d2e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     d32:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     d34:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     d36:	08 95       	ret

00000d38 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     d38:	84 e8       	ldi	r24, 0x84	; 132
     d3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a0 e0       	ldi	r26, 0x00	; 0
     d44:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     d46:	ec eb       	ldi	r30, 0xBC	; 188
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	20 81       	ld	r18, Z
     d4c:	22 23       	and	r18, r18
     d4e:	2c f0       	brlt	.+10     	; 0xd5a <i2c_readNak+0x22>
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	a1 09       	sbc	r26, r1
     d54:	b1 09       	sbc	r27, r1
     d56:	c8 f7       	brcc	.-14     	; 0xd4a <i2c_readNak+0x12>
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     d5a:	89 2b       	or	r24, r25
     d5c:	8a 2b       	or	r24, r26
     d5e:	8b 2b       	or	r24, r27
     d60:	19 f0       	breq	.+6      	; 0xd68 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     d62:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     d66:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     d68:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     d6a:	08 95       	ret

00000d6c <vfprintf>:
     d6c:	a3 e1       	ldi	r26, 0x13	; 19
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ec eb       	ldi	r30, 0xBC	; 188
     d72:	f6 e0       	ldi	r31, 0x06	; 6
     d74:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__prologue_saves__>
     d78:	6c 01       	movw	r12, r24
     d7a:	4b 01       	movw	r8, r22
     d7c:	2a 01       	movw	r4, r20
     d7e:	fc 01       	movw	r30, r24
     d80:	17 82       	std	Z+7, r1	; 0x07
     d82:	16 82       	std	Z+6, r1	; 0x06
     d84:	83 81       	ldd	r24, Z+3	; 0x03
     d86:	81 ff       	sbrs	r24, 1
     d88:	43 c3       	rjmp	.+1670   	; 0x1410 <vfprintf+0x6a4>
     d8a:	ae 01       	movw	r20, r28
     d8c:	4f 5f       	subi	r20, 0xFF	; 255
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
     d90:	3a 01       	movw	r6, r20
     d92:	f6 01       	movw	r30, r12
     d94:	93 81       	ldd	r25, Z+3	; 0x03
     d96:	f4 01       	movw	r30, r8
     d98:	93 fd       	sbrc	r25, 3
     d9a:	85 91       	lpm	r24, Z+
     d9c:	93 ff       	sbrs	r25, 3
     d9e:	81 91       	ld	r24, Z+
     da0:	4f 01       	movw	r8, r30
     da2:	88 23       	and	r24, r24
     da4:	09 f4       	brne	.+2      	; 0xda8 <vfprintf+0x3c>
     da6:	30 c3       	rjmp	.+1632   	; 0x1408 <vfprintf+0x69c>
     da8:	85 32       	cpi	r24, 0x25	; 37
     daa:	39 f4       	brne	.+14     	; 0xdba <vfprintf+0x4e>
     dac:	93 fd       	sbrc	r25, 3
     dae:	85 91       	lpm	r24, Z+
     db0:	93 ff       	sbrs	r25, 3
     db2:	81 91       	ld	r24, Z+
     db4:	4f 01       	movw	r8, r30
     db6:	85 32       	cpi	r24, 0x25	; 37
     db8:	39 f4       	brne	.+14     	; 0xdc8 <vfprintf+0x5c>
     dba:	b6 01       	movw	r22, r12
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
     dc2:	52 01       	movw	r10, r4
     dc4:	25 01       	movw	r4, r10
     dc6:	e5 cf       	rjmp	.-54     	; 0xd92 <vfprintf+0x26>
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	f1 2c       	mov	r15, r1
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	20 32       	cpi	r18, 0x20	; 32
     dd0:	a0 f4       	brcc	.+40     	; 0xdfa <vfprintf+0x8e>
     dd2:	8b 32       	cpi	r24, 0x2B	; 43
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <vfprintf+0x84>
     dd6:	30 f4       	brcc	.+12     	; 0xde4 <vfprintf+0x78>
     dd8:	80 32       	cpi	r24, 0x20	; 32
     dda:	59 f0       	breq	.+22     	; 0xdf2 <vfprintf+0x86>
     ddc:	83 32       	cpi	r24, 0x23	; 35
     dde:	69 f4       	brne	.+26     	; 0xdfa <vfprintf+0x8e>
     de0:	20 61       	ori	r18, 0x10	; 16
     de2:	2c c0       	rjmp	.+88     	; 0xe3c <vfprintf+0xd0>
     de4:	8d 32       	cpi	r24, 0x2D	; 45
     de6:	39 f0       	breq	.+14     	; 0xdf6 <vfprintf+0x8a>
     de8:	80 33       	cpi	r24, 0x30	; 48
     dea:	39 f4       	brne	.+14     	; 0xdfa <vfprintf+0x8e>
     dec:	21 60       	ori	r18, 0x01	; 1
     dee:	26 c0       	rjmp	.+76     	; 0xe3c <vfprintf+0xd0>
     df0:	22 60       	ori	r18, 0x02	; 2
     df2:	24 60       	ori	r18, 0x04	; 4
     df4:	23 c0       	rjmp	.+70     	; 0xe3c <vfprintf+0xd0>
     df6:	28 60       	ori	r18, 0x08	; 8
     df8:	21 c0       	rjmp	.+66     	; 0xe3c <vfprintf+0xd0>
     dfa:	27 fd       	sbrc	r18, 7
     dfc:	27 c0       	rjmp	.+78     	; 0xe4c <vfprintf+0xe0>
     dfe:	30 ed       	ldi	r19, 0xD0	; 208
     e00:	38 0f       	add	r19, r24
     e02:	3a 30       	cpi	r19, 0x0A	; 10
     e04:	78 f4       	brcc	.+30     	; 0xe24 <vfprintf+0xb8>
     e06:	26 ff       	sbrs	r18, 6
     e08:	06 c0       	rjmp	.+12     	; 0xe16 <vfprintf+0xaa>
     e0a:	fa e0       	ldi	r31, 0x0A	; 10
     e0c:	1f 9f       	mul	r17, r31
     e0e:	30 0d       	add	r19, r0
     e10:	11 24       	eor	r1, r1
     e12:	13 2f       	mov	r17, r19
     e14:	13 c0       	rjmp	.+38     	; 0xe3c <vfprintf+0xd0>
     e16:	4a e0       	ldi	r20, 0x0A	; 10
     e18:	f4 9e       	mul	r15, r20
     e1a:	30 0d       	add	r19, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	f3 2e       	mov	r15, r19
     e20:	20 62       	ori	r18, 0x20	; 32
     e22:	0c c0       	rjmp	.+24     	; 0xe3c <vfprintf+0xd0>
     e24:	8e 32       	cpi	r24, 0x2E	; 46
     e26:	21 f4       	brne	.+8      	; 0xe30 <vfprintf+0xc4>
     e28:	26 fd       	sbrc	r18, 6
     e2a:	ee c2       	rjmp	.+1500   	; 0x1408 <vfprintf+0x69c>
     e2c:	20 64       	ori	r18, 0x40	; 64
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <vfprintf+0xd0>
     e30:	8c 36       	cpi	r24, 0x6C	; 108
     e32:	11 f4       	brne	.+4      	; 0xe38 <vfprintf+0xcc>
     e34:	20 68       	ori	r18, 0x80	; 128
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <vfprintf+0xd0>
     e38:	88 36       	cpi	r24, 0x68	; 104
     e3a:	41 f4       	brne	.+16     	; 0xe4c <vfprintf+0xe0>
     e3c:	f4 01       	movw	r30, r8
     e3e:	93 fd       	sbrc	r25, 3
     e40:	85 91       	lpm	r24, Z+
     e42:	93 ff       	sbrs	r25, 3
     e44:	81 91       	ld	r24, Z+
     e46:	4f 01       	movw	r8, r30
     e48:	81 11       	cpse	r24, r1
     e4a:	c1 cf       	rjmp	.-126    	; 0xdce <vfprintf+0x62>
     e4c:	9b eb       	ldi	r25, 0xBB	; 187
     e4e:	98 0f       	add	r25, r24
     e50:	93 30       	cpi	r25, 0x03	; 3
     e52:	18 f4       	brcc	.+6      	; 0xe5a <vfprintf+0xee>
     e54:	20 61       	ori	r18, 0x10	; 16
     e56:	80 5e       	subi	r24, 0xE0	; 224
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <vfprintf+0xfa>
     e5a:	9b e9       	ldi	r25, 0x9B	; 155
     e5c:	98 0f       	add	r25, r24
     e5e:	93 30       	cpi	r25, 0x03	; 3
     e60:	08 f0       	brcs	.+2      	; 0xe64 <vfprintf+0xf8>
     e62:	71 c1       	rjmp	.+738    	; 0x1146 <vfprintf+0x3da>
     e64:	2f 7e       	andi	r18, 0xEF	; 239
     e66:	26 ff       	sbrs	r18, 6
     e68:	16 e0       	ldi	r17, 0x06	; 6
     e6a:	2f 73       	andi	r18, 0x3F	; 63
     e6c:	32 2e       	mov	r3, r18
     e6e:	85 36       	cpi	r24, 0x65	; 101
     e70:	19 f4       	brne	.+6      	; 0xe78 <vfprintf+0x10c>
     e72:	20 64       	ori	r18, 0x40	; 64
     e74:	32 2e       	mov	r3, r18
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <vfprintf+0x11c>
     e78:	86 36       	cpi	r24, 0x66	; 102
     e7a:	21 f4       	brne	.+8      	; 0xe84 <vfprintf+0x118>
     e7c:	f2 2f       	mov	r31, r18
     e7e:	f0 68       	ori	r31, 0x80	; 128
     e80:	3f 2e       	mov	r3, r31
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0x11c>
     e84:	11 11       	cpse	r17, r1
     e86:	11 50       	subi	r17, 0x01	; 1
     e88:	37 fe       	sbrs	r3, 7
     e8a:	07 c0       	rjmp	.+14     	; 0xe9a <vfprintf+0x12e>
     e8c:	1c 33       	cpi	r17, 0x3C	; 60
     e8e:	50 f4       	brcc	.+20     	; 0xea4 <vfprintf+0x138>
     e90:	ee 24       	eor	r14, r14
     e92:	e3 94       	inc	r14
     e94:	e1 0e       	add	r14, r17
     e96:	27 e0       	ldi	r18, 0x07	; 7
     e98:	0b c0       	rjmp	.+22     	; 0xeb0 <vfprintf+0x144>
     e9a:	18 30       	cpi	r17, 0x08	; 8
     e9c:	38 f0       	brcs	.+14     	; 0xeac <vfprintf+0x140>
     e9e:	27 e0       	ldi	r18, 0x07	; 7
     ea0:	17 e0       	ldi	r17, 0x07	; 7
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <vfprintf+0x142>
     ea4:	27 e0       	ldi	r18, 0x07	; 7
     ea6:	4c e3       	ldi	r20, 0x3C	; 60
     ea8:	e4 2e       	mov	r14, r20
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <vfprintf+0x144>
     eac:	21 2f       	mov	r18, r17
     eae:	e1 2c       	mov	r14, r1
     eb0:	52 01       	movw	r10, r4
     eb2:	44 e0       	ldi	r20, 0x04	; 4
     eb4:	a4 0e       	add	r10, r20
     eb6:	b1 1c       	adc	r11, r1
     eb8:	f2 01       	movw	r30, r4
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	0e 2d       	mov	r16, r14
     ec4:	a3 01       	movw	r20, r6
     ec6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__ftoa_engine>
     eca:	2c 01       	movw	r4, r24
     ecc:	09 81       	ldd	r16, Y+1	; 0x01
     ece:	00 ff       	sbrs	r16, 0
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x16a>
     ed2:	03 ff       	sbrs	r16, 3
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <vfprintf+0x178>
     ed6:	31 fc       	sbrc	r3, 1
     ed8:	08 c0       	rjmp	.+16     	; 0xeea <vfprintf+0x17e>
     eda:	32 fe       	sbrs	r3, 2
     edc:	09 c0       	rjmp	.+18     	; 0xef0 <vfprintf+0x184>
     ede:	30 e2       	ldi	r19, 0x20	; 32
     ee0:	23 2e       	mov	r2, r19
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <vfprintf+0x186>
     ee4:	2d e2       	ldi	r18, 0x2D	; 45
     ee6:	22 2e       	mov	r2, r18
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <vfprintf+0x186>
     eea:	9b e2       	ldi	r25, 0x2B	; 43
     eec:	29 2e       	mov	r2, r25
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <vfprintf+0x186>
     ef0:	21 2c       	mov	r2, r1
     ef2:	80 2f       	mov	r24, r16
     ef4:	8c 70       	andi	r24, 0x0C	; 12
     ef6:	19 f0       	breq	.+6      	; 0xefe <vfprintf+0x192>
     ef8:	21 10       	cpse	r2, r1
     efa:	68 c2       	rjmp	.+1232   	; 0x13cc <vfprintf+0x660>
     efc:	a8 c2       	rjmp	.+1360   	; 0x144e <vfprintf+0x6e2>
     efe:	37 fe       	sbrs	r3, 7
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <vfprintf+0x1b4>
     f02:	e4 0c       	add	r14, r4
     f04:	04 ff       	sbrs	r16, 4
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <vfprintf+0x1a4>
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	81 33       	cpi	r24, 0x31	; 49
     f0c:	09 f4       	brne	.+2      	; 0xf10 <vfprintf+0x1a4>
     f0e:	ea 94       	dec	r14
     f10:	1e 14       	cp	r1, r14
     f12:	74 f5       	brge	.+92     	; 0xf70 <vfprintf+0x204>
     f14:	f8 e0       	ldi	r31, 0x08	; 8
     f16:	fe 15       	cp	r31, r14
     f18:	78 f5       	brcc	.+94     	; 0xf78 <vfprintf+0x20c>
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	e8 2e       	mov	r14, r24
     f1e:	2c c0       	rjmp	.+88     	; 0xf78 <vfprintf+0x20c>
     f20:	36 fc       	sbrc	r3, 6
     f22:	2a c0       	rjmp	.+84     	; 0xf78 <vfprintf+0x20c>
     f24:	81 2f       	mov	r24, r17
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	84 15       	cp	r24, r4
     f2a:	95 05       	cpc	r25, r5
     f2c:	9c f0       	brlt	.+38     	; 0xf54 <vfprintf+0x1e8>
     f2e:	2c ef       	ldi	r18, 0xFC	; 252
     f30:	42 16       	cp	r4, r18
     f32:	2f ef       	ldi	r18, 0xFF	; 255
     f34:	52 06       	cpc	r5, r18
     f36:	74 f0       	brlt	.+28     	; 0xf54 <vfprintf+0x1e8>
     f38:	43 2d       	mov	r20, r3
     f3a:	40 68       	ori	r20, 0x80	; 128
     f3c:	34 2e       	mov	r3, r20
     f3e:	0a c0       	rjmp	.+20     	; 0xf54 <vfprintf+0x1e8>
     f40:	e2 e0       	ldi	r30, 0x02	; 2
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	ec 0f       	add	r30, r28
     f46:	fd 1f       	adc	r31, r29
     f48:	e1 0f       	add	r30, r17
     f4a:	f1 1d       	adc	r31, r1
     f4c:	80 81       	ld	r24, Z
     f4e:	80 33       	cpi	r24, 0x30	; 48
     f50:	19 f4       	brne	.+6      	; 0xf58 <vfprintf+0x1ec>
     f52:	11 50       	subi	r17, 0x01	; 1
     f54:	11 11       	cpse	r17, r1
     f56:	f4 cf       	rjmp	.-24     	; 0xf40 <vfprintf+0x1d4>
     f58:	37 fe       	sbrs	r3, 7
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <vfprintf+0x20c>
     f5c:	ee 24       	eor	r14, r14
     f5e:	e3 94       	inc	r14
     f60:	e1 0e       	add	r14, r17
     f62:	81 2f       	mov	r24, r17
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	48 16       	cp	r4, r24
     f68:	59 06       	cpc	r5, r25
     f6a:	2c f4       	brge	.+10     	; 0xf76 <vfprintf+0x20a>
     f6c:	14 19       	sub	r17, r4
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <vfprintf+0x20c>
     f70:	ee 24       	eor	r14, r14
     f72:	e3 94       	inc	r14
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <vfprintf+0x20c>
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	37 fe       	sbrs	r3, 7
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <vfprintf+0x21c>
     f7c:	14 14       	cp	r1, r4
     f7e:	15 04       	cpc	r1, r5
     f80:	34 f4       	brge	.+12     	; 0xf8e <vfprintf+0x222>
     f82:	c2 01       	movw	r24, r4
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <vfprintf+0x226>
     f88:	85 e0       	ldi	r24, 0x05	; 5
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <vfprintf+0x226>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	21 10       	cpse	r2, r1
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	11 23       	and	r17, r17
     f98:	31 f0       	breq	.+12     	; 0xfa6 <vfprintf+0x23a>
     f9a:	21 2f       	mov	r18, r17
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	2f 5f       	subi	r18, 0xFF	; 255
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	2f 2d       	mov	r18, r15
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	82 17       	cp	r24, r18
     fac:	93 07       	cpc	r25, r19
     fae:	14 f4       	brge	.+4      	; 0xfb4 <vfprintf+0x248>
     fb0:	f8 1a       	sub	r15, r24
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <vfprintf+0x24a>
     fb4:	f1 2c       	mov	r15, r1
     fb6:	83 2d       	mov	r24, r3
     fb8:	89 70       	andi	r24, 0x09	; 9
     fba:	49 f4       	brne	.+18     	; 0xfce <vfprintf+0x262>
     fbc:	ff 20       	and	r15, r15
     fbe:	39 f0       	breq	.+14     	; 0xfce <vfprintf+0x262>
     fc0:	b6 01       	movw	r22, r12
     fc2:	80 e2       	ldi	r24, 0x20	; 32
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
     fca:	fa 94       	dec	r15
     fcc:	f7 cf       	rjmp	.-18     	; 0xfbc <vfprintf+0x250>
     fce:	22 20       	and	r2, r2
     fd0:	29 f0       	breq	.+10     	; 0xfdc <vfprintf+0x270>
     fd2:	b6 01       	movw	r22, r12
     fd4:	82 2d       	mov	r24, r2
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
     fdc:	33 fc       	sbrc	r3, 3
     fde:	09 c0       	rjmp	.+18     	; 0xff2 <vfprintf+0x286>
     fe0:	ff 20       	and	r15, r15
     fe2:	39 f0       	breq	.+14     	; 0xff2 <vfprintf+0x286>
     fe4:	b6 01       	movw	r22, r12
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
     fee:	fa 94       	dec	r15
     ff0:	f7 cf       	rjmp	.-18     	; 0xfe0 <vfprintf+0x274>
     ff2:	37 fe       	sbrs	r3, 7
     ff4:	5a c0       	rjmp	.+180    	; 0x10aa <vfprintf+0x33e>
     ff6:	94 2d       	mov	r25, r4
     ff8:	85 2d       	mov	r24, r5
     ffa:	57 fe       	sbrs	r5, 7
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <vfprintf+0x296>
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	29 2e       	mov	r2, r25
    1004:	38 2e       	mov	r3, r24
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	a2 01       	movw	r20, r4
    100c:	4e 19       	sub	r20, r14
    100e:	51 09       	sbc	r21, r1
    1010:	5d 87       	std	Y+13, r21	; 0x0d
    1012:	4c 87       	std	Y+12, r20	; 0x0c
    1014:	a2 01       	movw	r20, r4
    1016:	42 19       	sub	r20, r2
    1018:	53 09       	sbc	r21, r3
    101a:	5f 87       	std	Y+15, r21	; 0x0f
    101c:	4e 87       	std	Y+14, r20	; 0x0e
    101e:	61 2f       	mov	r22, r17
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	44 27       	eor	r20, r20
    1024:	55 27       	eor	r21, r21
    1026:	46 1b       	sub	r20, r22
    1028:	57 0b       	sbc	r21, r23
    102a:	59 8b       	std	Y+17, r21	; 0x11
    102c:	48 8b       	std	Y+16, r20	; 0x10
    102e:	5f ef       	ldi	r21, 0xFF	; 255
    1030:	25 16       	cp	r2, r21
    1032:	35 06       	cpc	r3, r21
    1034:	49 f4       	brne	.+18     	; 0x1048 <vfprintf+0x2dc>
    1036:	b6 01       	movw	r22, r12
    1038:	8e e2       	ldi	r24, 0x2E	; 46
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	2a 8b       	std	Y+18, r18	; 0x12
    103e:	3b 8b       	std	Y+19, r19	; 0x13
    1040:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    1044:	3b 89       	ldd	r19, Y+19	; 0x13
    1046:	2a 89       	ldd	r18, Y+18	; 0x12
    1048:	42 14       	cp	r4, r2
    104a:	53 04       	cpc	r5, r3
    104c:	6c f0       	brlt	.+26     	; 0x1068 <vfprintf+0x2fc>
    104e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1050:	5d 85       	ldd	r21, Y+13	; 0x0d
    1052:	42 15       	cp	r20, r2
    1054:	53 05       	cpc	r21, r3
    1056:	44 f4       	brge	.+16     	; 0x1068 <vfprintf+0x2fc>
    1058:	ee 85       	ldd	r30, Y+14	; 0x0e
    105a:	ff 85       	ldd	r31, Y+15	; 0x0f
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	e6 0d       	add	r30, r6
    1062:	f7 1d       	adc	r31, r7
    1064:	81 81       	ldd	r24, Z+1	; 0x01
    1066:	01 c0       	rjmp	.+2      	; 0x106a <vfprintf+0x2fe>
    1068:	80 e3       	ldi	r24, 0x30	; 48
    106a:	51 e0       	ldi	r21, 0x01	; 1
    106c:	25 1a       	sub	r2, r21
    106e:	31 08       	sbc	r3, r1
    1070:	2f 5f       	subi	r18, 0xFF	; 255
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	48 89       	ldd	r20, Y+16	; 0x10
    1076:	59 89       	ldd	r21, Y+17	; 0x11
    1078:	24 16       	cp	r2, r20
    107a:	35 06       	cpc	r3, r21
    107c:	4c f0       	brlt	.+18     	; 0x1090 <vfprintf+0x324>
    107e:	b6 01       	movw	r22, r12
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	2a 8b       	std	Y+18, r18	; 0x12
    1084:	3b 8b       	std	Y+19, r19	; 0x13
    1086:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    108a:	2a 89       	ldd	r18, Y+18	; 0x12
    108c:	3b 89       	ldd	r19, Y+19	; 0x13
    108e:	cf cf       	rjmp	.-98     	; 0x102e <vfprintf+0x2c2>
    1090:	24 14       	cp	r2, r4
    1092:	35 04       	cpc	r3, r5
    1094:	39 f4       	brne	.+14     	; 0x10a4 <vfprintf+0x338>
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	96 33       	cpi	r25, 0x36	; 54
    109a:	18 f4       	brcc	.+6      	; 0x10a2 <vfprintf+0x336>
    109c:	95 33       	cpi	r25, 0x35	; 53
    109e:	11 f4       	brne	.+4      	; 0x10a4 <vfprintf+0x338>
    10a0:	04 ff       	sbrs	r16, 4
    10a2:	81 e3       	ldi	r24, 0x31	; 49
    10a4:	b6 01       	movw	r22, r12
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	4b c0       	rjmp	.+150    	; 0x1140 <vfprintf+0x3d4>
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	81 33       	cpi	r24, 0x31	; 49
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <vfprintf+0x346>
    10b0:	0f 7e       	andi	r16, 0xEF	; 239
    10b2:	b6 01       	movw	r22, r12
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    10ba:	11 11       	cpse	r17, r1
    10bc:	05 c0       	rjmp	.+10     	; 0x10c8 <vfprintf+0x35c>
    10be:	34 fc       	sbrc	r3, 4
    10c0:	18 c0       	rjmp	.+48     	; 0x10f2 <vfprintf+0x386>
    10c2:	85 e6       	ldi	r24, 0x65	; 101
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	17 c0       	rjmp	.+46     	; 0x10f6 <vfprintf+0x38a>
    10c8:	b6 01       	movw	r22, r12
    10ca:	8e e2       	ldi	r24, 0x2E	; 46
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	ee 24       	eor	r14, r14
    10d6:	e3 94       	inc	r14
    10d8:	e8 0e       	add	r14, r24
    10da:	f3 01       	movw	r30, r6
    10dc:	e8 0f       	add	r30, r24
    10de:	f1 1d       	adc	r31, r1
    10e0:	80 81       	ld	r24, Z
    10e2:	b6 01       	movw	r22, r12
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    10ea:	11 50       	subi	r17, 0x01	; 1
    10ec:	8e 2d       	mov	r24, r14
    10ee:	91 f7       	brne	.-28     	; 0x10d4 <vfprintf+0x368>
    10f0:	e6 cf       	rjmp	.-52     	; 0x10be <vfprintf+0x352>
    10f2:	85 e4       	ldi	r24, 0x45	; 69
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	b6 01       	movw	r22, r12
    10f8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    10fc:	57 fc       	sbrc	r5, 7
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <vfprintf+0x39e>
    1100:	41 14       	cp	r4, r1
    1102:	51 04       	cpc	r5, r1
    1104:	39 f4       	brne	.+14     	; 0x1114 <vfprintf+0x3a8>
    1106:	04 ff       	sbrs	r16, 4
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <vfprintf+0x3a8>
    110a:	51 94       	neg	r5
    110c:	41 94       	neg	r4
    110e:	51 08       	sbc	r5, r1
    1110:	8d e2       	ldi	r24, 0x2D	; 45
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <vfprintf+0x3aa>
    1114:	8b e2       	ldi	r24, 0x2B	; 43
    1116:	b6 01       	movw	r22, r12
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    111e:	80 e3       	ldi	r24, 0x30	; 48
    1120:	9a e0       	ldi	r25, 0x0A	; 10
    1122:	49 16       	cp	r4, r25
    1124:	51 04       	cpc	r5, r1
    1126:	2c f0       	brlt	.+10     	; 0x1132 <vfprintf+0x3c6>
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	5a e0       	ldi	r21, 0x0A	; 10
    112c:	45 1a       	sub	r4, r21
    112e:	51 08       	sbc	r5, r1
    1130:	f7 cf       	rjmp	.-18     	; 0x1120 <vfprintf+0x3b4>
    1132:	b6 01       	movw	r22, r12
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    113a:	b6 01       	movw	r22, r12
    113c:	c2 01       	movw	r24, r4
    113e:	c0 96       	adiw	r24, 0x30	; 48
    1140:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    1144:	57 c1       	rjmp	.+686    	; 0x13f4 <vfprintf+0x688>
    1146:	83 36       	cpi	r24, 0x63	; 99
    1148:	31 f0       	breq	.+12     	; 0x1156 <vfprintf+0x3ea>
    114a:	83 37       	cpi	r24, 0x73	; 115
    114c:	79 f0       	breq	.+30     	; 0x116c <vfprintf+0x400>
    114e:	83 35       	cpi	r24, 0x53	; 83
    1150:	09 f0       	breq	.+2      	; 0x1154 <vfprintf+0x3e8>
    1152:	58 c0       	rjmp	.+176    	; 0x1204 <vfprintf+0x498>
    1154:	21 c0       	rjmp	.+66     	; 0x1198 <vfprintf+0x42c>
    1156:	52 01       	movw	r10, r4
    1158:	e2 e0       	ldi	r30, 0x02	; 2
    115a:	ae 0e       	add	r10, r30
    115c:	b1 1c       	adc	r11, r1
    115e:	f2 01       	movw	r30, r4
    1160:	80 81       	ld	r24, Z
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	10 e0       	ldi	r17, 0x00	; 0
    1168:	23 01       	movw	r4, r6
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <vfprintf+0x428>
    116c:	52 01       	movw	r10, r4
    116e:	f2 e0       	ldi	r31, 0x02	; 2
    1170:	af 0e       	add	r10, r31
    1172:	b1 1c       	adc	r11, r1
    1174:	f2 01       	movw	r30, r4
    1176:	40 80       	ld	r4, Z
    1178:	51 80       	ldd	r5, Z+1	; 0x01
    117a:	26 ff       	sbrs	r18, 6
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <vfprintf+0x418>
    117e:	61 2f       	mov	r22, r17
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vfprintf+0x41c>
    1184:	6f ef       	ldi	r22, 0xFF	; 255
    1186:	7f ef       	ldi	r23, 0xFF	; 255
    1188:	c2 01       	movw	r24, r4
    118a:	2a 8b       	std	Y+18, r18	; 0x12
    118c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <strnlen>
    1190:	8c 01       	movw	r16, r24
    1192:	2a 89       	ldd	r18, Y+18	; 0x12
    1194:	2f 77       	andi	r18, 0x7F	; 127
    1196:	15 c0       	rjmp	.+42     	; 0x11c2 <vfprintf+0x456>
    1198:	52 01       	movw	r10, r4
    119a:	f2 e0       	ldi	r31, 0x02	; 2
    119c:	af 0e       	add	r10, r31
    119e:	b1 1c       	adc	r11, r1
    11a0:	f2 01       	movw	r30, r4
    11a2:	40 80       	ld	r4, Z
    11a4:	51 80       	ldd	r5, Z+1	; 0x01
    11a6:	26 ff       	sbrs	r18, 6
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <vfprintf+0x444>
    11aa:	61 2f       	mov	r22, r17
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <vfprintf+0x448>
    11b0:	6f ef       	ldi	r22, 0xFF	; 255
    11b2:	7f ef       	ldi	r23, 0xFF	; 255
    11b4:	c2 01       	movw	r24, r4
    11b6:	2a 8b       	std	Y+18, r18	; 0x12
    11b8:	0e 94 41 0b 	call	0x1682	; 0x1682 <strnlen_P>
    11bc:	8c 01       	movw	r16, r24
    11be:	2a 89       	ldd	r18, Y+18	; 0x12
    11c0:	20 68       	ori	r18, 0x80	; 128
    11c2:	32 2e       	mov	r3, r18
    11c4:	23 fd       	sbrc	r18, 3
    11c6:	1a c0       	rjmp	.+52     	; 0x11fc <vfprintf+0x490>
    11c8:	8f 2d       	mov	r24, r15
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	08 17       	cp	r16, r24
    11ce:	19 07       	cpc	r17, r25
    11d0:	a8 f4       	brcc	.+42     	; 0x11fc <vfprintf+0x490>
    11d2:	b6 01       	movw	r22, r12
    11d4:	80 e2       	ldi	r24, 0x20	; 32
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    11dc:	fa 94       	dec	r15
    11de:	f4 cf       	rjmp	.-24     	; 0x11c8 <vfprintf+0x45c>
    11e0:	f2 01       	movw	r30, r4
    11e2:	37 fc       	sbrc	r3, 7
    11e4:	85 91       	lpm	r24, Z+
    11e6:	37 fe       	sbrs	r3, 7
    11e8:	81 91       	ld	r24, Z+
    11ea:	2f 01       	movw	r4, r30
    11ec:	b6 01       	movw	r22, r12
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    11f4:	f1 10       	cpse	r15, r1
    11f6:	fa 94       	dec	r15
    11f8:	01 50       	subi	r16, 0x01	; 1
    11fa:	11 09       	sbc	r17, r1
    11fc:	01 15       	cp	r16, r1
    11fe:	11 05       	cpc	r17, r1
    1200:	79 f7       	brne	.-34     	; 0x11e0 <vfprintf+0x474>
    1202:	f8 c0       	rjmp	.+496    	; 0x13f4 <vfprintf+0x688>
    1204:	84 36       	cpi	r24, 0x64	; 100
    1206:	11 f0       	breq	.+4      	; 0x120c <vfprintf+0x4a0>
    1208:	89 36       	cpi	r24, 0x69	; 105
    120a:	59 f5       	brne	.+86     	; 0x1262 <vfprintf+0x4f6>
    120c:	52 01       	movw	r10, r4
    120e:	27 ff       	sbrs	r18, 7
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <vfprintf+0x4b8>
    1212:	f4 e0       	ldi	r31, 0x04	; 4
    1214:	af 0e       	add	r10, r31
    1216:	b1 1c       	adc	r11, r1
    1218:	f2 01       	movw	r30, r4
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	0a c0       	rjmp	.+20     	; 0x1238 <vfprintf+0x4cc>
    1224:	f2 e0       	ldi	r31, 0x02	; 2
    1226:	af 0e       	add	r10, r31
    1228:	b1 1c       	adc	r11, r1
    122a:	f2 01       	movw	r30, r4
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	07 2e       	mov	r0, r23
    1232:	00 0c       	add	r0, r0
    1234:	88 0b       	sbc	r24, r24
    1236:	99 0b       	sbc	r25, r25
    1238:	2f 76       	andi	r18, 0x6F	; 111
    123a:	32 2e       	mov	r3, r18
    123c:	97 ff       	sbrs	r25, 7
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <vfprintf+0x4e6>
    1240:	90 95       	com	r25
    1242:	80 95       	com	r24
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	20 68       	ori	r18, 0x80	; 128
    1250:	32 2e       	mov	r3, r18
    1252:	2a e0       	ldi	r18, 0x0A	; 10
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	a3 01       	movw	r20, r6
    1258:	0e 94 a5 0b 	call	0x174a	; 0x174a <__ultoa_invert>
    125c:	e8 2e       	mov	r14, r24
    125e:	e6 18       	sub	r14, r6
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <vfprintf+0x574>
    1262:	02 2f       	mov	r16, r18
    1264:	85 37       	cpi	r24, 0x75	; 117
    1266:	21 f4       	brne	.+8      	; 0x1270 <vfprintf+0x504>
    1268:	0f 7e       	andi	r16, 0xEF	; 239
    126a:	2a e0       	ldi	r18, 0x0A	; 10
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	1d c0       	rjmp	.+58     	; 0x12aa <vfprintf+0x53e>
    1270:	09 7f       	andi	r16, 0xF9	; 249
    1272:	8f 36       	cpi	r24, 0x6F	; 111
    1274:	91 f0       	breq	.+36     	; 0x129a <vfprintf+0x52e>
    1276:	18 f4       	brcc	.+6      	; 0x127e <vfprintf+0x512>
    1278:	88 35       	cpi	r24, 0x58	; 88
    127a:	59 f0       	breq	.+22     	; 0x1292 <vfprintf+0x526>
    127c:	c5 c0       	rjmp	.+394    	; 0x1408 <vfprintf+0x69c>
    127e:	80 37       	cpi	r24, 0x70	; 112
    1280:	19 f0       	breq	.+6      	; 0x1288 <vfprintf+0x51c>
    1282:	88 37       	cpi	r24, 0x78	; 120
    1284:	11 f0       	breq	.+4      	; 0x128a <vfprintf+0x51e>
    1286:	c0 c0       	rjmp	.+384    	; 0x1408 <vfprintf+0x69c>
    1288:	00 61       	ori	r16, 0x10	; 16
    128a:	04 ff       	sbrs	r16, 4
    128c:	09 c0       	rjmp	.+18     	; 0x12a0 <vfprintf+0x534>
    128e:	04 60       	ori	r16, 0x04	; 4
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <vfprintf+0x534>
    1292:	24 ff       	sbrs	r18, 4
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <vfprintf+0x53a>
    1296:	06 60       	ori	r16, 0x06	; 6
    1298:	06 c0       	rjmp	.+12     	; 0x12a6 <vfprintf+0x53a>
    129a:	28 e0       	ldi	r18, 0x08	; 8
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <vfprintf+0x53e>
    12a0:	20 e1       	ldi	r18, 0x10	; 16
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <vfprintf+0x53e>
    12a6:	20 e1       	ldi	r18, 0x10	; 16
    12a8:	32 e0       	ldi	r19, 0x02	; 2
    12aa:	52 01       	movw	r10, r4
    12ac:	07 ff       	sbrs	r16, 7
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <vfprintf+0x556>
    12b0:	f4 e0       	ldi	r31, 0x04	; 4
    12b2:	af 0e       	add	r10, r31
    12b4:	b1 1c       	adc	r11, r1
    12b6:	f2 01       	movw	r30, r4
    12b8:	60 81       	ld	r22, Z
    12ba:	71 81       	ldd	r23, Z+1	; 0x01
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <vfprintf+0x566>
    12c2:	f2 e0       	ldi	r31, 0x02	; 2
    12c4:	af 0e       	add	r10, r31
    12c6:	b1 1c       	adc	r11, r1
    12c8:	f2 01       	movw	r30, r4
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a3 01       	movw	r20, r6
    12d4:	0e 94 a5 0b 	call	0x174a	; 0x174a <__ultoa_invert>
    12d8:	e8 2e       	mov	r14, r24
    12da:	e6 18       	sub	r14, r6
    12dc:	0f 77       	andi	r16, 0x7F	; 127
    12de:	30 2e       	mov	r3, r16
    12e0:	36 fe       	sbrs	r3, 6
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <vfprintf+0x58e>
    12e4:	33 2d       	mov	r19, r3
    12e6:	3e 7f       	andi	r19, 0xFE	; 254
    12e8:	e1 16       	cp	r14, r17
    12ea:	50 f4       	brcc	.+20     	; 0x1300 <vfprintf+0x594>
    12ec:	34 fe       	sbrs	r3, 4
    12ee:	0a c0       	rjmp	.+20     	; 0x1304 <vfprintf+0x598>
    12f0:	32 fc       	sbrc	r3, 2
    12f2:	08 c0       	rjmp	.+16     	; 0x1304 <vfprintf+0x598>
    12f4:	33 2d       	mov	r19, r3
    12f6:	3e 7e       	andi	r19, 0xEE	; 238
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <vfprintf+0x598>
    12fa:	0e 2d       	mov	r16, r14
    12fc:	33 2d       	mov	r19, r3
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <vfprintf+0x59a>
    1300:	0e 2d       	mov	r16, r14
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <vfprintf+0x59a>
    1304:	01 2f       	mov	r16, r17
    1306:	34 ff       	sbrs	r19, 4
    1308:	0c c0       	rjmp	.+24     	; 0x1322 <vfprintf+0x5b6>
    130a:	fe 01       	movw	r30, r28
    130c:	ee 0d       	add	r30, r14
    130e:	f1 1d       	adc	r31, r1
    1310:	80 81       	ld	r24, Z
    1312:	80 33       	cpi	r24, 0x30	; 48
    1314:	11 f4       	brne	.+4      	; 0x131a <vfprintf+0x5ae>
    1316:	39 7e       	andi	r19, 0xE9	; 233
    1318:	08 c0       	rjmp	.+16     	; 0x132a <vfprintf+0x5be>
    131a:	32 ff       	sbrs	r19, 2
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <vfprintf+0x5bc>
    131e:	0e 5f       	subi	r16, 0xFE	; 254
    1320:	04 c0       	rjmp	.+8      	; 0x132a <vfprintf+0x5be>
    1322:	83 2f       	mov	r24, r19
    1324:	86 78       	andi	r24, 0x86	; 134
    1326:	09 f0       	breq	.+2      	; 0x132a <vfprintf+0x5be>
    1328:	0f 5f       	subi	r16, 0xFF	; 255
    132a:	33 fd       	sbrc	r19, 3
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <vfprintf+0x5e8>
    132e:	30 ff       	sbrs	r19, 0
    1330:	06 c0       	rjmp	.+12     	; 0x133e <vfprintf+0x5d2>
    1332:	1e 2d       	mov	r17, r14
    1334:	0f 15       	cp	r16, r15
    1336:	18 f4       	brcc	.+6      	; 0x133e <vfprintf+0x5d2>
    1338:	1f 0d       	add	r17, r15
    133a:	10 1b       	sub	r17, r16
    133c:	0f 2d       	mov	r16, r15
    133e:	0f 15       	cp	r16, r15
    1340:	68 f4       	brcc	.+26     	; 0x135c <vfprintf+0x5f0>
    1342:	b6 01       	movw	r22, r12
    1344:	80 e2       	ldi	r24, 0x20	; 32
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	3b 8b       	std	Y+19, r19	; 0x13
    134a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    134e:	0f 5f       	subi	r16, 0xFF	; 255
    1350:	3b 89       	ldd	r19, Y+19	; 0x13
    1352:	f5 cf       	rjmp	.-22     	; 0x133e <vfprintf+0x5d2>
    1354:	0f 15       	cp	r16, r15
    1356:	10 f4       	brcc	.+4      	; 0x135c <vfprintf+0x5f0>
    1358:	f0 1a       	sub	r15, r16
    135a:	01 c0       	rjmp	.+2      	; 0x135e <vfprintf+0x5f2>
    135c:	f1 2c       	mov	r15, r1
    135e:	34 ff       	sbrs	r19, 4
    1360:	12 c0       	rjmp	.+36     	; 0x1386 <vfprintf+0x61a>
    1362:	b6 01       	movw	r22, r12
    1364:	80 e3       	ldi	r24, 0x30	; 48
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	3b 8b       	std	Y+19, r19	; 0x13
    136a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    136e:	3b 89       	ldd	r19, Y+19	; 0x13
    1370:	32 ff       	sbrs	r19, 2
    1372:	17 c0       	rjmp	.+46     	; 0x13a2 <vfprintf+0x636>
    1374:	31 fd       	sbrc	r19, 1
    1376:	03 c0       	rjmp	.+6      	; 0x137e <vfprintf+0x612>
    1378:	88 e7       	ldi	r24, 0x78	; 120
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <vfprintf+0x616>
    137e:	88 e5       	ldi	r24, 0x58	; 88
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	b6 01       	movw	r22, r12
    1384:	0c c0       	rjmp	.+24     	; 0x139e <vfprintf+0x632>
    1386:	83 2f       	mov	r24, r19
    1388:	86 78       	andi	r24, 0x86	; 134
    138a:	59 f0       	breq	.+22     	; 0x13a2 <vfprintf+0x636>
    138c:	31 ff       	sbrs	r19, 1
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x628>
    1390:	8b e2       	ldi	r24, 0x2B	; 43
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <vfprintf+0x62a>
    1394:	80 e2       	ldi	r24, 0x20	; 32
    1396:	37 fd       	sbrc	r19, 7
    1398:	8d e2       	ldi	r24, 0x2D	; 45
    139a:	b6 01       	movw	r22, r12
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    13a2:	e1 16       	cp	r14, r17
    13a4:	38 f4       	brcc	.+14     	; 0x13b4 <vfprintf+0x648>
    13a6:	b6 01       	movw	r22, r12
    13a8:	80 e3       	ldi	r24, 0x30	; 48
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    13b0:	11 50       	subi	r17, 0x01	; 1
    13b2:	f7 cf       	rjmp	.-18     	; 0x13a2 <vfprintf+0x636>
    13b4:	ea 94       	dec	r14
    13b6:	f3 01       	movw	r30, r6
    13b8:	ee 0d       	add	r30, r14
    13ba:	f1 1d       	adc	r31, r1
    13bc:	80 81       	ld	r24, Z
    13be:	b6 01       	movw	r22, r12
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    13c6:	e1 10       	cpse	r14, r1
    13c8:	f5 cf       	rjmp	.-22     	; 0x13b4 <vfprintf+0x648>
    13ca:	14 c0       	rjmp	.+40     	; 0x13f4 <vfprintf+0x688>
    13cc:	f4 e0       	ldi	r31, 0x04	; 4
    13ce:	ff 15       	cp	r31, r15
    13d0:	58 f5       	brcc	.+86     	; 0x1428 <vfprintf+0x6bc>
    13d2:	84 e0       	ldi	r24, 0x04	; 4
    13d4:	f8 1a       	sub	r15, r24
    13d6:	33 fe       	sbrs	r3, 3
    13d8:	1e c0       	rjmp	.+60     	; 0x1416 <vfprintf+0x6aa>
    13da:	21 10       	cpse	r2, r1
    13dc:	26 c0       	rjmp	.+76     	; 0x142a <vfprintf+0x6be>
    13de:	03 ff       	sbrs	r16, 3
    13e0:	2a c0       	rjmp	.+84     	; 0x1436 <vfprintf+0x6ca>
    13e2:	08 e6       	ldi	r16, 0x68	; 104
    13e4:	10 e0       	ldi	r17, 0x00	; 0
    13e6:	f3 2d       	mov	r31, r3
    13e8:	f0 71       	andi	r31, 0x10	; 16
    13ea:	3f 2e       	mov	r3, r31
    13ec:	f8 01       	movw	r30, r16
    13ee:	84 91       	lpm	r24, Z
    13f0:	81 11       	cpse	r24, r1
    13f2:	24 c0       	rjmp	.+72     	; 0x143c <vfprintf+0x6d0>
    13f4:	ff 20       	and	r15, r15
    13f6:	09 f4       	brne	.+2      	; 0x13fa <vfprintf+0x68e>
    13f8:	e5 cc       	rjmp	.-1590   	; 0xdc4 <vfprintf+0x58>
    13fa:	b6 01       	movw	r22, r12
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    1404:	fa 94       	dec	r15
    1406:	f6 cf       	rjmp	.-20     	; 0x13f4 <vfprintf+0x688>
    1408:	f6 01       	movw	r30, r12
    140a:	86 81       	ldd	r24, Z+6	; 0x06
    140c:	97 81       	ldd	r25, Z+7	; 0x07
    140e:	26 c0       	rjmp	.+76     	; 0x145c <vfprintf+0x6f0>
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	23 c0       	rjmp	.+70     	; 0x145c <vfprintf+0x6f0>
    1416:	b6 01       	movw	r22, r12
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    1420:	fa 94       	dec	r15
    1422:	f1 10       	cpse	r15, r1
    1424:	f8 cf       	rjmp	.-16     	; 0x1416 <vfprintf+0x6aa>
    1426:	d9 cf       	rjmp	.-78     	; 0x13da <vfprintf+0x66e>
    1428:	f1 2c       	mov	r15, r1
    142a:	b6 01       	movw	r22, r12
    142c:	82 2d       	mov	r24, r2
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    1434:	d4 cf       	rjmp	.-88     	; 0x13de <vfprintf+0x672>
    1436:	0c e6       	ldi	r16, 0x6C	; 108
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	d5 cf       	rjmp	.-86     	; 0x13e6 <vfprintf+0x67a>
    143c:	31 10       	cpse	r3, r1
    143e:	80 52       	subi	r24, 0x20	; 32
    1440:	b6 01       	movw	r22, r12
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fputc>
    1448:	0f 5f       	subi	r16, 0xFF	; 255
    144a:	1f 4f       	sbci	r17, 0xFF	; 255
    144c:	cf cf       	rjmp	.-98     	; 0x13ec <vfprintf+0x680>
    144e:	23 e0       	ldi	r18, 0x03	; 3
    1450:	2f 15       	cp	r18, r15
    1452:	10 f4       	brcc	.+4      	; 0x1458 <vfprintf+0x6ec>
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	be cf       	rjmp	.-132    	; 0x13d4 <vfprintf+0x668>
    1458:	f1 2c       	mov	r15, r1
    145a:	c1 cf       	rjmp	.-126    	; 0x13de <vfprintf+0x672>
    145c:	63 96       	adiw	r28, 0x13	; 19
    145e:	e2 e1       	ldi	r30, 0x12	; 18
    1460:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__epilogue_restores__>

00001464 <__prologue_saves__>:
    1464:	2f 92       	push	r2
    1466:	3f 92       	push	r3
    1468:	4f 92       	push	r4
    146a:	5f 92       	push	r5
    146c:	6f 92       	push	r6
    146e:	7f 92       	push	r7
    1470:	8f 92       	push	r8
    1472:	9f 92       	push	r9
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	ca 1b       	sub	r28, r26
    148e:	db 0b       	sbc	r29, r27
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	09 94       	ijmp

0000149c <__epilogue_restores__>:
    149c:	2a 88       	ldd	r2, Y+18	; 0x12
    149e:	39 88       	ldd	r3, Y+17	; 0x11
    14a0:	48 88       	ldd	r4, Y+16	; 0x10
    14a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ae:	b9 84       	ldd	r11, Y+9	; 0x09
    14b0:	c8 84       	ldd	r12, Y+8	; 0x08
    14b2:	df 80       	ldd	r13, Y+7	; 0x07
    14b4:	ee 80       	ldd	r14, Y+6	; 0x06
    14b6:	fd 80       	ldd	r15, Y+5	; 0x05
    14b8:	0c 81       	ldd	r16, Y+4	; 0x04
    14ba:	1b 81       	ldd	r17, Y+3	; 0x03
    14bc:	aa 81       	ldd	r26, Y+2	; 0x02
    14be:	b9 81       	ldd	r27, Y+1	; 0x01
    14c0:	ce 0f       	add	r28, r30
    14c2:	d1 1d       	adc	r29, r1
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	ed 01       	movw	r28, r26
    14d0:	08 95       	ret

000014d2 <__ftoa_engine>:
    14d2:	28 30       	cpi	r18, 0x08	; 8
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <__ftoa_engine+0x6>
    14d6:	27 e0       	ldi	r18, 0x07	; 7
    14d8:	33 27       	eor	r19, r19
    14da:	da 01       	movw	r26, r20
    14dc:	99 0f       	add	r25, r25
    14de:	31 1d       	adc	r19, r1
    14e0:	87 fd       	sbrc	r24, 7
    14e2:	91 60       	ori	r25, 0x01	; 1
    14e4:	00 96       	adiw	r24, 0x00	; 0
    14e6:	61 05       	cpc	r22, r1
    14e8:	71 05       	cpc	r23, r1
    14ea:	39 f4       	brne	.+14     	; 0x14fa <__ftoa_engine+0x28>
    14ec:	32 60       	ori	r19, 0x02	; 2
    14ee:	2e 5f       	subi	r18, 0xFE	; 254
    14f0:	3d 93       	st	X+, r19
    14f2:	30 e3       	ldi	r19, 0x30	; 48
    14f4:	2a 95       	dec	r18
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <__ftoa_engine+0x1e>
    14f8:	08 95       	ret
    14fa:	9f 3f       	cpi	r25, 0xFF	; 255
    14fc:	30 f0       	brcs	.+12     	; 0x150a <__ftoa_engine+0x38>
    14fe:	80 38       	cpi	r24, 0x80	; 128
    1500:	71 05       	cpc	r23, r1
    1502:	61 05       	cpc	r22, r1
    1504:	09 f0       	breq	.+2      	; 0x1508 <__ftoa_engine+0x36>
    1506:	3c 5f       	subi	r19, 0xFC	; 252
    1508:	3c 5f       	subi	r19, 0xFC	; 252
    150a:	3d 93       	st	X+, r19
    150c:	91 30       	cpi	r25, 0x01	; 1
    150e:	08 f0       	brcs	.+2      	; 0x1512 <__ftoa_engine+0x40>
    1510:	80 68       	ori	r24, 0x80	; 128
    1512:	91 1d       	adc	r25, r1
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	1f 93       	push	r17
    151a:	0f 93       	push	r16
    151c:	ff 92       	push	r15
    151e:	ef 92       	push	r14
    1520:	19 2f       	mov	r17, r25
    1522:	98 7f       	andi	r25, 0xF8	; 248
    1524:	96 95       	lsr	r25
    1526:	e9 2f       	mov	r30, r25
    1528:	96 95       	lsr	r25
    152a:	96 95       	lsr	r25
    152c:	e9 0f       	add	r30, r25
    152e:	ff 27       	eor	r31, r31
    1530:	e6 53       	subi	r30, 0x36	; 54
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	99 27       	eor	r25, r25
    1536:	33 27       	eor	r19, r19
    1538:	ee 24       	eor	r14, r14
    153a:	ff 24       	eor	r15, r15
    153c:	a7 01       	movw	r20, r14
    153e:	e7 01       	movw	r28, r14
    1540:	05 90       	lpm	r0, Z+
    1542:	08 94       	sec
    1544:	07 94       	ror	r0
    1546:	28 f4       	brcc	.+10     	; 0x1552 <__ftoa_engine+0x80>
    1548:	36 0f       	add	r19, r22
    154a:	e7 1e       	adc	r14, r23
    154c:	f8 1e       	adc	r15, r24
    154e:	49 1f       	adc	r20, r25
    1550:	51 1d       	adc	r21, r1
    1552:	66 0f       	add	r22, r22
    1554:	77 1f       	adc	r23, r23
    1556:	88 1f       	adc	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	06 94       	lsr	r0
    155c:	a1 f7       	brne	.-24     	; 0x1546 <__ftoa_engine+0x74>
    155e:	05 90       	lpm	r0, Z+
    1560:	07 94       	ror	r0
    1562:	28 f4       	brcc	.+10     	; 0x156e <__ftoa_engine+0x9c>
    1564:	e7 0e       	add	r14, r23
    1566:	f8 1e       	adc	r15, r24
    1568:	49 1f       	adc	r20, r25
    156a:	56 1f       	adc	r21, r22
    156c:	c1 1d       	adc	r28, r1
    156e:	77 0f       	add	r23, r23
    1570:	88 1f       	adc	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	66 1f       	adc	r22, r22
    1576:	06 94       	lsr	r0
    1578:	a1 f7       	brne	.-24     	; 0x1562 <__ftoa_engine+0x90>
    157a:	05 90       	lpm	r0, Z+
    157c:	07 94       	ror	r0
    157e:	28 f4       	brcc	.+10     	; 0x158a <__ftoa_engine+0xb8>
    1580:	f8 0e       	add	r15, r24
    1582:	49 1f       	adc	r20, r25
    1584:	56 1f       	adc	r21, r22
    1586:	c7 1f       	adc	r28, r23
    1588:	d1 1d       	adc	r29, r1
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	66 1f       	adc	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	06 94       	lsr	r0
    1594:	a1 f7       	brne	.-24     	; 0x157e <__ftoa_engine+0xac>
    1596:	05 90       	lpm	r0, Z+
    1598:	07 94       	ror	r0
    159a:	20 f4       	brcc	.+8      	; 0x15a4 <__ftoa_engine+0xd2>
    159c:	49 0f       	add	r20, r25
    159e:	56 1f       	adc	r21, r22
    15a0:	c7 1f       	adc	r28, r23
    15a2:	d8 1f       	adc	r29, r24
    15a4:	99 0f       	add	r25, r25
    15a6:	66 1f       	adc	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	88 1f       	adc	r24, r24
    15ac:	06 94       	lsr	r0
    15ae:	a9 f7       	brne	.-22     	; 0x159a <__ftoa_engine+0xc8>
    15b0:	84 91       	lpm	r24, Z
    15b2:	10 95       	com	r17
    15b4:	17 70       	andi	r17, 0x07	; 7
    15b6:	41 f0       	breq	.+16     	; 0x15c8 <__ftoa_engine+0xf6>
    15b8:	d6 95       	lsr	r29
    15ba:	c7 95       	ror	r28
    15bc:	57 95       	ror	r21
    15be:	47 95       	ror	r20
    15c0:	f7 94       	ror	r15
    15c2:	e7 94       	ror	r14
    15c4:	1a 95       	dec	r17
    15c6:	c1 f7       	brne	.-16     	; 0x15b8 <__ftoa_engine+0xe6>
    15c8:	e0 e7       	ldi	r30, 0x70	; 112
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	68 94       	set
    15ce:	15 90       	lpm	r1, Z+
    15d0:	15 91       	lpm	r17, Z+
    15d2:	35 91       	lpm	r19, Z+
    15d4:	65 91       	lpm	r22, Z+
    15d6:	95 91       	lpm	r25, Z+
    15d8:	05 90       	lpm	r0, Z+
    15da:	7f e2       	ldi	r23, 0x2F	; 47
    15dc:	73 95       	inc	r23
    15de:	e1 18       	sub	r14, r1
    15e0:	f1 0a       	sbc	r15, r17
    15e2:	43 0b       	sbc	r20, r19
    15e4:	56 0b       	sbc	r21, r22
    15e6:	c9 0b       	sbc	r28, r25
    15e8:	d0 09       	sbc	r29, r0
    15ea:	c0 f7       	brcc	.-16     	; 0x15dc <__ftoa_engine+0x10a>
    15ec:	e1 0c       	add	r14, r1
    15ee:	f1 1e       	adc	r15, r17
    15f0:	43 1f       	adc	r20, r19
    15f2:	56 1f       	adc	r21, r22
    15f4:	c9 1f       	adc	r28, r25
    15f6:	d0 1d       	adc	r29, r0
    15f8:	7e f4       	brtc	.+30     	; 0x1618 <__ftoa_engine+0x146>
    15fa:	70 33       	cpi	r23, 0x30	; 48
    15fc:	11 f4       	brne	.+4      	; 0x1602 <__ftoa_engine+0x130>
    15fe:	8a 95       	dec	r24
    1600:	e6 cf       	rjmp	.-52     	; 0x15ce <__ftoa_engine+0xfc>
    1602:	e8 94       	clt
    1604:	01 50       	subi	r16, 0x01	; 1
    1606:	30 f0       	brcs	.+12     	; 0x1614 <__ftoa_engine+0x142>
    1608:	08 0f       	add	r16, r24
    160a:	0a f4       	brpl	.+2      	; 0x160e <__ftoa_engine+0x13c>
    160c:	00 27       	eor	r16, r16
    160e:	02 17       	cp	r16, r18
    1610:	08 f4       	brcc	.+2      	; 0x1614 <__ftoa_engine+0x142>
    1612:	20 2f       	mov	r18, r16
    1614:	23 95       	inc	r18
    1616:	02 2f       	mov	r16, r18
    1618:	7a 33       	cpi	r23, 0x3A	; 58
    161a:	28 f0       	brcs	.+10     	; 0x1626 <__ftoa_engine+0x154>
    161c:	79 e3       	ldi	r23, 0x39	; 57
    161e:	7d 93       	st	X+, r23
    1620:	2a 95       	dec	r18
    1622:	e9 f7       	brne	.-6      	; 0x161e <__ftoa_engine+0x14c>
    1624:	10 c0       	rjmp	.+32     	; 0x1646 <__ftoa_engine+0x174>
    1626:	7d 93       	st	X+, r23
    1628:	2a 95       	dec	r18
    162a:	89 f6       	brne	.-94     	; 0x15ce <__ftoa_engine+0xfc>
    162c:	06 94       	lsr	r0
    162e:	97 95       	ror	r25
    1630:	67 95       	ror	r22
    1632:	37 95       	ror	r19
    1634:	17 95       	ror	r17
    1636:	17 94       	ror	r1
    1638:	e1 18       	sub	r14, r1
    163a:	f1 0a       	sbc	r15, r17
    163c:	43 0b       	sbc	r20, r19
    163e:	56 0b       	sbc	r21, r22
    1640:	c9 0b       	sbc	r28, r25
    1642:	d0 09       	sbc	r29, r0
    1644:	98 f0       	brcs	.+38     	; 0x166c <__ftoa_engine+0x19a>
    1646:	23 95       	inc	r18
    1648:	7e 91       	ld	r23, -X
    164a:	73 95       	inc	r23
    164c:	7a 33       	cpi	r23, 0x3A	; 58
    164e:	08 f0       	brcs	.+2      	; 0x1652 <__ftoa_engine+0x180>
    1650:	70 e3       	ldi	r23, 0x30	; 48
    1652:	7c 93       	st	X, r23
    1654:	20 13       	cpse	r18, r16
    1656:	b8 f7       	brcc	.-18     	; 0x1646 <__ftoa_engine+0x174>
    1658:	7e 91       	ld	r23, -X
    165a:	70 61       	ori	r23, 0x10	; 16
    165c:	7d 93       	st	X+, r23
    165e:	30 f0       	brcs	.+12     	; 0x166c <__ftoa_engine+0x19a>
    1660:	83 95       	inc	r24
    1662:	71 e3       	ldi	r23, 0x31	; 49
    1664:	7d 93       	st	X+, r23
    1666:	70 e3       	ldi	r23, 0x30	; 48
    1668:	2a 95       	dec	r18
    166a:	e1 f7       	brne	.-8      	; 0x1664 <__ftoa_engine+0x192>
    166c:	11 24       	eor	r1, r1
    166e:	ef 90       	pop	r14
    1670:	ff 90       	pop	r15
    1672:	0f 91       	pop	r16
    1674:	1f 91       	pop	r17
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	99 27       	eor	r25, r25
    167c:	87 fd       	sbrc	r24, 7
    167e:	90 95       	com	r25
    1680:	08 95       	ret

00001682 <strnlen_P>:
    1682:	fc 01       	movw	r30, r24
    1684:	05 90       	lpm	r0, Z+
    1686:	61 50       	subi	r22, 0x01	; 1
    1688:	70 40       	sbci	r23, 0x00	; 0
    168a:	01 10       	cpse	r0, r1
    168c:	d8 f7       	brcc	.-10     	; 0x1684 <strnlen_P+0x2>
    168e:	80 95       	com	r24
    1690:	90 95       	com	r25
    1692:	8e 0f       	add	r24, r30
    1694:	9f 1f       	adc	r25, r31
    1696:	08 95       	ret

00001698 <strnlen>:
    1698:	fc 01       	movw	r30, r24
    169a:	61 50       	subi	r22, 0x01	; 1
    169c:	70 40       	sbci	r23, 0x00	; 0
    169e:	01 90       	ld	r0, Z+
    16a0:	01 10       	cpse	r0, r1
    16a2:	d8 f7       	brcc	.-10     	; 0x169a <strnlen+0x2>
    16a4:	80 95       	com	r24
    16a6:	90 95       	com	r25
    16a8:	8e 0f       	add	r24, r30
    16aa:	9f 1f       	adc	r25, r31
    16ac:	08 95       	ret

000016ae <fputc>:
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	fb 01       	movw	r30, r22
    16b8:	23 81       	ldd	r18, Z+3	; 0x03
    16ba:	21 fd       	sbrc	r18, 1
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <fputc+0x16>
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	9f ef       	ldi	r25, 0xFF	; 255
    16c2:	28 c0       	rjmp	.+80     	; 0x1714 <fputc+0x66>
    16c4:	22 ff       	sbrs	r18, 2
    16c6:	16 c0       	rjmp	.+44     	; 0x16f4 <fputc+0x46>
    16c8:	46 81       	ldd	r20, Z+6	; 0x06
    16ca:	57 81       	ldd	r21, Z+7	; 0x07
    16cc:	24 81       	ldd	r18, Z+4	; 0x04
    16ce:	35 81       	ldd	r19, Z+5	; 0x05
    16d0:	42 17       	cp	r20, r18
    16d2:	53 07       	cpc	r21, r19
    16d4:	44 f4       	brge	.+16     	; 0x16e6 <fputc+0x38>
    16d6:	a0 81       	ld	r26, Z
    16d8:	b1 81       	ldd	r27, Z+1	; 0x01
    16da:	9d 01       	movw	r18, r26
    16dc:	2f 5f       	subi	r18, 0xFF	; 255
    16de:	3f 4f       	sbci	r19, 0xFF	; 255
    16e0:	31 83       	std	Z+1, r19	; 0x01
    16e2:	20 83       	st	Z, r18
    16e4:	8c 93       	st	X, r24
    16e6:	26 81       	ldd	r18, Z+6	; 0x06
    16e8:	37 81       	ldd	r19, Z+7	; 0x07
    16ea:	2f 5f       	subi	r18, 0xFF	; 255
    16ec:	3f 4f       	sbci	r19, 0xFF	; 255
    16ee:	37 83       	std	Z+7, r19	; 0x07
    16f0:	26 83       	std	Z+6, r18	; 0x06
    16f2:	10 c0       	rjmp	.+32     	; 0x1714 <fputc+0x66>
    16f4:	eb 01       	movw	r28, r22
    16f6:	09 2f       	mov	r16, r25
    16f8:	18 2f       	mov	r17, r24
    16fa:	00 84       	ldd	r0, Z+8	; 0x08
    16fc:	f1 85       	ldd	r31, Z+9	; 0x09
    16fe:	e0 2d       	mov	r30, r0
    1700:	09 95       	icall
    1702:	89 2b       	or	r24, r25
    1704:	e1 f6       	brne	.-72     	; 0x16be <fputc+0x10>
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	9f 81       	ldd	r25, Y+7	; 0x07
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	9f 83       	std	Y+7, r25	; 0x07
    170e:	8e 83       	std	Y+6, r24	; 0x06
    1710:	81 2f       	mov	r24, r17
    1712:	90 2f       	mov	r25, r16
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <printf>:
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e9       	ldi	r30, 0x95	; 149
    1724:	fb e0       	ldi	r31, 0x0B	; 11
    1726:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__prologue_saves__+0x20>
    172a:	ae 01       	movw	r20, r28
    172c:	4b 5f       	subi	r20, 0xFB	; 251
    172e:	5f 4f       	sbci	r21, 0xFF	; 255
    1730:	fa 01       	movw	r30, r20
    1732:	61 91       	ld	r22, Z+
    1734:	71 91       	ld	r23, Z+
    1736:	af 01       	movw	r20, r30
    1738:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <__iob+0x2>
    173c:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <__iob+0x3>
    1740:	0e 94 b6 06 	call	0xd6c	; 0xd6c <vfprintf>
    1744:	e2 e0       	ldi	r30, 0x02	; 2
    1746:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__epilogue_restores__+0x20>

0000174a <__ultoa_invert>:
    174a:	fa 01       	movw	r30, r20
    174c:	aa 27       	eor	r26, r26
    174e:	28 30       	cpi	r18, 0x08	; 8
    1750:	51 f1       	breq	.+84     	; 0x17a6 <__ultoa_invert+0x5c>
    1752:	20 31       	cpi	r18, 0x10	; 16
    1754:	81 f1       	breq	.+96     	; 0x17b6 <__ultoa_invert+0x6c>
    1756:	e8 94       	clt
    1758:	6f 93       	push	r22
    175a:	6e 7f       	andi	r22, 0xFE	; 254
    175c:	6e 5f       	subi	r22, 0xFE	; 254
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	8f 4f       	sbci	r24, 0xFF	; 255
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	af 4f       	sbci	r26, 0xFF	; 255
    1766:	b1 e0       	ldi	r27, 0x01	; 1
    1768:	3e d0       	rcall	.+124    	; 0x17e6 <__ultoa_invert+0x9c>
    176a:	b4 e0       	ldi	r27, 0x04	; 4
    176c:	3c d0       	rcall	.+120    	; 0x17e6 <__ultoa_invert+0x9c>
    176e:	67 0f       	add	r22, r23
    1770:	78 1f       	adc	r23, r24
    1772:	89 1f       	adc	r24, r25
    1774:	9a 1f       	adc	r25, r26
    1776:	a1 1d       	adc	r26, r1
    1778:	68 0f       	add	r22, r24
    177a:	79 1f       	adc	r23, r25
    177c:	8a 1f       	adc	r24, r26
    177e:	91 1d       	adc	r25, r1
    1780:	a1 1d       	adc	r26, r1
    1782:	6a 0f       	add	r22, r26
    1784:	71 1d       	adc	r23, r1
    1786:	81 1d       	adc	r24, r1
    1788:	91 1d       	adc	r25, r1
    178a:	a1 1d       	adc	r26, r1
    178c:	20 d0       	rcall	.+64     	; 0x17ce <__ultoa_invert+0x84>
    178e:	09 f4       	brne	.+2      	; 0x1792 <__ultoa_invert+0x48>
    1790:	68 94       	set
    1792:	3f 91       	pop	r19
    1794:	2a e0       	ldi	r18, 0x0A	; 10
    1796:	26 9f       	mul	r18, r22
    1798:	11 24       	eor	r1, r1
    179a:	30 19       	sub	r19, r0
    179c:	30 5d       	subi	r19, 0xD0	; 208
    179e:	31 93       	st	Z+, r19
    17a0:	de f6       	brtc	.-74     	; 0x1758 <__ultoa_invert+0xe>
    17a2:	cf 01       	movw	r24, r30
    17a4:	08 95       	ret
    17a6:	46 2f       	mov	r20, r22
    17a8:	47 70       	andi	r20, 0x07	; 7
    17aa:	40 5d       	subi	r20, 0xD0	; 208
    17ac:	41 93       	st	Z+, r20
    17ae:	b3 e0       	ldi	r27, 0x03	; 3
    17b0:	0f d0       	rcall	.+30     	; 0x17d0 <__ultoa_invert+0x86>
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__ultoa_invert+0x5c>
    17b4:	f6 cf       	rjmp	.-20     	; 0x17a2 <__ultoa_invert+0x58>
    17b6:	46 2f       	mov	r20, r22
    17b8:	4f 70       	andi	r20, 0x0F	; 15
    17ba:	40 5d       	subi	r20, 0xD0	; 208
    17bc:	4a 33       	cpi	r20, 0x3A	; 58
    17be:	18 f0       	brcs	.+6      	; 0x17c6 <__ultoa_invert+0x7c>
    17c0:	49 5d       	subi	r20, 0xD9	; 217
    17c2:	31 fd       	sbrc	r19, 1
    17c4:	40 52       	subi	r20, 0x20	; 32
    17c6:	41 93       	st	Z+, r20
    17c8:	02 d0       	rcall	.+4      	; 0x17ce <__ultoa_invert+0x84>
    17ca:	a9 f7       	brne	.-22     	; 0x17b6 <__ultoa_invert+0x6c>
    17cc:	ea cf       	rjmp	.-44     	; 0x17a2 <__ultoa_invert+0x58>
    17ce:	b4 e0       	ldi	r27, 0x04	; 4
    17d0:	a6 95       	lsr	r26
    17d2:	97 95       	ror	r25
    17d4:	87 95       	ror	r24
    17d6:	77 95       	ror	r23
    17d8:	67 95       	ror	r22
    17da:	ba 95       	dec	r27
    17dc:	c9 f7       	brne	.-14     	; 0x17d0 <__ultoa_invert+0x86>
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	61 05       	cpc	r22, r1
    17e2:	71 05       	cpc	r23, r1
    17e4:	08 95       	ret
    17e6:	9b 01       	movw	r18, r22
    17e8:	ac 01       	movw	r20, r24
    17ea:	0a 2e       	mov	r0, r26
    17ec:	06 94       	lsr	r0
    17ee:	57 95       	ror	r21
    17f0:	47 95       	ror	r20
    17f2:	37 95       	ror	r19
    17f4:	27 95       	ror	r18
    17f6:	ba 95       	dec	r27
    17f8:	c9 f7       	brne	.-14     	; 0x17ec <__ultoa_invert+0xa2>
    17fa:	62 0f       	add	r22, r18
    17fc:	73 1f       	adc	r23, r19
    17fe:	84 1f       	adc	r24, r20
    1800:	95 1f       	adc	r25, r21
    1802:	a0 1d       	adc	r26, r0
    1804:	08 95       	ret

00001806 <_exit>:
    1806:	f8 94       	cli

00001808 <__stop_program>:
    1808:	ff cf       	rjmp	.-2      	; 0x1808 <__stop_program>
